syntax = "proto3";

package codeaudit;

option go_package = "./proto";
option java_package = "com.codeaudit.proto";

// 污点分析服务
service TaintAnalyzer {
  // 分析污点
  rpc AnalyzeTaint(TaintAnalysisRequest) returns (TaintAnalysisResponse);
  
  // 追踪污点路径
  rpc TracePath(TracePathRequest) returns (stream PathSegment);
  
  // 查询污点源
  rpc QuerySources(QuerySourcesRequest) returns (QuerySourcesResponse);
  
  // 查询污点汇
  rpc QuerySinks(QuerySinksRequest) returns (QuerySinksResponse);
}

// 污点分析请求
message TaintAnalysisRequest {
  string file_path = 1;           // 文件路径
  string entry_function = 2;      // 入口函数
  repeated string source_patterns = 3; // 污点源模式
  repeated string sink_patterns = 4;   // 污点汇模式
  repeated string sanitizer_patterns = 5; // 净化函数模式
  int32 max_depth = 6;            // 最大追踪深度
}

// 污点分析响应
message TaintAnalysisResponse {
  bool success = 1;               // 是否成功
  repeated TaintVulnerability vulnerabilities = 2; // 发现的漏洞
  int32 analysis_time_ms = 3;     // 分析耗时
  string error_message = 4;       // 错误信息
}

// 污点漏洞
message TaintVulnerability {
  string id = 1;                  // 漏洞ID
  string type = 2;                // 漏洞类型（SQL Injection, XSS等）
  string severity = 3;            // 严重性（Critical, High, Medium, Low）
  string source = 4;              // 污点源
  string sink = 5;                // 污点汇
  repeated PathNode path = 6;     // 污点路径
  double confidence = 7;          // 置信度（0-1）
  string description = 8;         // 描述
}

// 污点路径节点
message PathNode {
  string node_id = 1;             // 节点ID
  string function_name = 2;       // 函数名
  string file_path = 3;           // 文件路径
  int32 line_number = 4;          // 行号
  string operation = 5;           // 操作类型（assignment, call, return等）
  string variable_name = 6;       // 变量名
  string data_flow = 7;           // 数据流描述
}

// 追踪路径请求
message TracePathRequest {
  string source_function = 1;     // 源函数
  string sink_function = 2;       // 汇函数
  int32 max_paths = 3;            // 最多返回路径数
}

// 路径段
message PathSegment {
  int32 path_index = 1;           // 路径序号
  repeated PathNode nodes = 2;    // 路径节点
  bool has_sanitizer = 3;         // 是否包含净化函数
}

// 查询污点源请求
message QuerySourcesRequest {
  string pattern = 1;             // 源模式（正则表达式）
  string language = 2;            // 编程语言
}

// 污点源信息
message SourceInfo {
  string id = 1;                  // 源ID
  string name = 2;                // 源名称
  string type = 3;                // 源类型（用户输入、HTTP请求等）
  repeated string keywords = 4;   // 关键字
  string description = 5;         // 描述
}

// 查询污点源响应
message QuerySourcesResponse {
  repeated SourceInfo sources = 1; // 污点源列表
  int32 total_count = 2;          // 总数
}

// 查询污点汇请求
message QuerySinksRequest {
  string pattern = 1;             // 汇模式（正则表达式）
  string language = 2;            // 编程语言
}

// 污点汇信息
message SinkInfo {
  string id = 1;                  // 汇ID
  string name = 2;                // 汇名称
  string type = 3;                // 汇类型（数据库操作、命令执行等）
  repeated string keywords = 4;   // 关键字
  string vulnerability_type = 5;  // 关联的漏洞类型
  string description = 6;         // 描述
}

// 查询污点汇响应
message QuerySinksResponse {
  repeated SinkInfo sinks = 1;    // 污点汇列表
  int32 total_count = 2;          // 总数
}

// 污点源枚举
enum TaintSourceType {
  UNKNOWN_SOURCE = 0;
  USER_INPUT = 1;                 // 用户输入
  HTTP_REQUEST = 2;               // HTTP请求
  FILE_INPUT = 3;                 // 文件输入
  DATABASE_QUERY = 4;             // 数据库查询
  ENVIRONMENT_VARIABLE = 5;       // 环境变量
  NETWORK_INPUT = 6;              // 网络输入
  COMMAND_LINE_ARGS = 7;          // 命令行参数
}

// 污点汇枚举
enum TaintSinkType {
  UNKNOWN_SINK = 0;
  SQL_QUERY = 1;                  // SQL查询
  COMMAND_EXECUTION = 2;          // 命令执行
  HTML_OUTPUT = 3;                // HTML输出
  FILE_WRITE = 4;                 // 文件写入
  EVAL = 5;                       // eval()执行
  XPATH_QUERY = 6;                // XPath查询
  LDAP_QUERY = 7;                 // LDAP查询
  URL_REDIRECT = 8;               // URL重定向
}
