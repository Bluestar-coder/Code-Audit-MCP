syntax = "proto3";

package codeaudit;

option go_package = "./proto";
option java_package = "com.codeaudit.proto";

// AST 解析服务
service ASTParser {
  // 解析单个文件
  rpc ParseFile(ParseRequest) returns (ParseResponse);
  
  // 批量解析文件
  rpc ParseBatch(BatchParseRequest) returns (stream ParseResponse);
}

// 解析单个文件请求
message ParseRequest {
  string file_path = 1;           // 文件路径
  string language = 2;             // 编程语言 (go, python, java, javascript, php, etc.)
  bytes content = 3;               // 文件内容（如果为空则从file_path读取）
  bool include_metadata = 4;       // 是否包含元数据
}

// 解析响应
message ParseResponse {
  string file_path = 1;           // 文件路径
  bool success = 2;               // 是否成功解析
  bytes ast_data = 3;             // 序列化的AST数据（JSON格式）
  repeated ParseError errors = 4; // 解析错误
  ParseMetadata metadata = 5;     // 元数据
}

// 解析错误信息
message ParseError {
  int32 line = 1;                 // 错误行号
  int32 column = 2;               // 错误列号
  string message = 3;             // 错误消息
  string error_type = 4;          // 错误类型
}

// 元数据
message ParseMetadata {
  int64 parse_time_ms = 1;        // 解析耗时（毫秒）
  int32 total_lines = 2;          // 总行数
  int32 total_functions = 3;      // 函数总数
  int32 total_classes = 4;        // 类总数
  string language_version = 5;    // 语言版本
}

// 批量解析请求
message BatchParseRequest {
  repeated ParseRequest requests = 1; // 待解析文件列表
  int32 max_concurrent = 2;          // 最大并发数（默认4）
}

// AST 节点信息
message ASTNode {
  string id = 1;                  // 节点ID
  string type = 2;                // 节点类型 (FunctionDecl, ClassDecl, etc.)
  string name = 3;                // 节点名称
  int32 start_line = 4;           // 起始行号
  int32 start_column = 5;         // 起始列号
  int32 end_line = 6;             // 结束行号
  int32 end_column = 7;           // 结束列号
  string source_code = 8;         // 源代码片段
  repeated ASTNode children = 9;  // 子节点
  repeated KeyValue attributes = 10; // 额外属性
}

// 键值对
message KeyValue {
  string key = 1;
  string value = 2;
}

// 语言信息
enum Language {
  UNKNOWN = 0;
  GO = 1;
  PYTHON = 2;
  JAVA = 3;
  JAVASCRIPT = 4;
  TYPESCRIPT = 5;
  PHP = 6;
  RUBY = 7;
  RUST = 8;
  CSHARP = 9;
  CPP = 10;
  C = 11;
  SOLIDITY = 12;
  VYPER = 13;
}

// 漏洞检测服务
service VulnerabilityDetector {
  // 扫描单个文件
  rpc ScanFile(ScanFileRequest) returns (ScanFileResponse);
  
  // 批量扫描文件
  rpc ScanBatch(ScanBatchRequest) returns (ScanBatchResponse);
  
  // 获取所有规则
  rpc GetRules(GetRulesRequest) returns (GetRulesResponse);
  
  // 根据ID获取规则
  rpc GetRuleById(GetRuleByIdRequest) returns (GetRuleByIdResponse);
}

// 扫描文件请求
message ScanFileRequest {
  string file_path = 1;           // 文件路径
  string language = 2;            // 编程语言
  string content = 3;             // 文件内容
  repeated string rule_ids = 4;   // 指定要使用的规则ID（为空则使用所有规则）
}

// 扫描文件响应
message ScanFileResponse {
  bool success = 1;                           // 是否成功
  string file_path = 2;                       // 文件路径
  string language = 3;                        // 检测到的语言
  repeated VulnerabilityFinding findings = 4; // 发现的漏洞
  string statistics = 5;                      // 统计信息（JSON格式）
  string error = 6;                          // 错误信息
}

// 批量扫描请求
message ScanBatchRequest {
  repeated ScanFileRequest files = 1; // 待扫描文件列表
  repeated string rule_ids = 2;       // 指定要使用的规则ID
}

// 批量扫描响应
message ScanBatchResponse {
  repeated ScanFileResponse results = 1; // 扫描结果
  string overall_statistics = 2;         // 总体统计信息（JSON格式）
}

// 漏洞发现
message VulnerabilityFinding {
  string rule_id = 1;      // 规则ID
  string rule_name = 2;    // 规则名称
  string category = 3;     // 漏洞类别
  string severity = 4;     // 严重程度
  string message = 5;      // 描述信息
  string file_path = 6;    // 文件路径
  int32 line = 7;          // 行号
  int32 column = 8;        // 列号
  string code = 9;         // 相关代码
  string language = 10;    // 编程语言
  string metadata = 11;    // 元数据（JSON格式）
}

// 获取规则请求
message GetRulesRequest {
  string language = 1;     // 按语言过滤（可选）
  string category = 2;     // 按类别过滤（可选）
}

// 获取规则响应
message GetRulesResponse {
  repeated VulnerabilityRule rules = 1; // 规则列表
}

// 根据ID获取规则请求
message GetRuleByIdRequest {
  string rule_id = 1;      // 规则ID
}

// 根据ID获取规则响应
message GetRuleByIdResponse {
  bool found = 1;          // 是否找到
  VulnerabilityRule rule = 2; // 规则信息
}

// 漏洞检测规则
message VulnerabilityRule {
  string name = 1;                    // 规则名称
  string id = 2;                      // 规则ID
  string category = 3;                // 类别
  string severity = 4;                // 严重程度
  string description = 5;             // 描述
  repeated string language = 6;       // 适用语言
  repeated RulePattern patterns = 7;  // 检测模式
  repeated RulePattern safe_patterns = 8; // 安全模式
}

// 规则模式
message RulePattern {
  string pattern = 1;      // 正则表达式模式
  string message = 2;      // 匹配时的消息
  string severity = 3;     // 严重程度
  repeated string language = 4; // 适用语言
}
