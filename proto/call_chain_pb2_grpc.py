# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import call_chain_pb2 as call__chain__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in call_chain_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CallChainAnalyzerStub(object):
    """调用链分析服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BuildCallGraph = channel.unary_unary(
                '/codeaudit.CallChainAnalyzer/BuildCallGraph',
                request_serializer=call__chain__pb2.BuildCallGraphRequest.SerializeToString,
                response_deserializer=call__chain__pb2.BuildCallGraphResponse.FromString,
                _registered_method=True)
        self.QueryCallPath = channel.unary_unary(
                '/codeaudit.CallChainAnalyzer/QueryCallPath',
                request_serializer=call__chain__pb2.QueryCallPathRequest.SerializeToString,
                response_deserializer=call__chain__pb2.QueryCallPathResponse.FromString,
                _registered_method=True)
        self.QueryCallDepth = channel.unary_unary(
                '/codeaudit.CallChainAnalyzer/QueryCallDepth',
                request_serializer=call__chain__pb2.QueryCallDepthRequest.SerializeToString,
                response_deserializer=call__chain__pb2.QueryCallDepthResponse.FromString,
                _registered_method=True)
        self.AnalyzeCycles = channel.unary_unary(
                '/codeaudit.CallChainAnalyzer/AnalyzeCycles',
                request_serializer=call__chain__pb2.AnalyzeCyclesRequest.SerializeToString,
                response_deserializer=call__chain__pb2.AnalyzeCyclesResponse.FromString,
                _registered_method=True)
        self.FindDeadCode = channel.unary_unary(
                '/codeaudit.CallChainAnalyzer/FindDeadCode',
                request_serializer=call__chain__pb2.FindDeadCodeRequest.SerializeToString,
                response_deserializer=call__chain__pb2.FindDeadCodeResponse.FromString,
                _registered_method=True)


class CallChainAnalyzerServicer(object):
    """调用链分析服务
    """

    def BuildCallGraph(self, request, context):
        """构建调用图
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryCallPath(self, request, context):
        """查询调用路径
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryCallDepth(self, request, context):
        """查询调用深度
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeCycles(self, request, context):
        """分析循环调用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindDeadCode(self, request, context):
        """查询死代码
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CallChainAnalyzerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BuildCallGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.BuildCallGraph,
                    request_deserializer=call__chain__pb2.BuildCallGraphRequest.FromString,
                    response_serializer=call__chain__pb2.BuildCallGraphResponse.SerializeToString,
            ),
            'QueryCallPath': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryCallPath,
                    request_deserializer=call__chain__pb2.QueryCallPathRequest.FromString,
                    response_serializer=call__chain__pb2.QueryCallPathResponse.SerializeToString,
            ),
            'QueryCallDepth': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryCallDepth,
                    request_deserializer=call__chain__pb2.QueryCallDepthRequest.FromString,
                    response_serializer=call__chain__pb2.QueryCallDepthResponse.SerializeToString,
            ),
            'AnalyzeCycles': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeCycles,
                    request_deserializer=call__chain__pb2.AnalyzeCyclesRequest.FromString,
                    response_serializer=call__chain__pb2.AnalyzeCyclesResponse.SerializeToString,
            ),
            'FindDeadCode': grpc.unary_unary_rpc_method_handler(
                    servicer.FindDeadCode,
                    request_deserializer=call__chain__pb2.FindDeadCodeRequest.FromString,
                    response_serializer=call__chain__pb2.FindDeadCodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'codeaudit.CallChainAnalyzer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('codeaudit.CallChainAnalyzer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CallChainAnalyzer(object):
    """调用链分析服务
    """

    @staticmethod
    def BuildCallGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/codeaudit.CallChainAnalyzer/BuildCallGraph',
            call__chain__pb2.BuildCallGraphRequest.SerializeToString,
            call__chain__pb2.BuildCallGraphResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryCallPath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/codeaudit.CallChainAnalyzer/QueryCallPath',
            call__chain__pb2.QueryCallPathRequest.SerializeToString,
            call__chain__pb2.QueryCallPathResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryCallDepth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/codeaudit.CallChainAnalyzer/QueryCallDepth',
            call__chain__pb2.QueryCallDepthRequest.SerializeToString,
            call__chain__pb2.QueryCallDepthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeCycles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/codeaudit.CallChainAnalyzer/AnalyzeCycles',
            call__chain__pb2.AnalyzeCyclesRequest.SerializeToString,
            call__chain__pb2.AnalyzeCyclesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindDeadCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/codeaudit.CallChainAnalyzer/FindDeadCode',
            call__chain__pb2.FindDeadCodeRequest.SerializeToString,
            call__chain__pb2.FindDeadCodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
