# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: proto/ast_parser.proto
# Protobuf Python Version: 6.31.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    31,
    1,
    '',
    'proto/ast_parser.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x16proto/ast_parser.proto\x12\tcodeaudit\"^\n\x0cParseRequest\x12\x11\n\tfile_path\x18\x01 \x01(\t\x12\x10\n\x08language\x18\x02 \x01(\t\x12\x0f\n\x07\x63ontent\x18\x03 \x01(\x0c\x12\x18\n\x10include_metadata\x18\x04 \x01(\x08\"\x98\x01\n\rParseResponse\x12\x11\n\tfile_path\x18\x01 \x01(\t\x12\x0f\n\x07success\x18\x02 \x01(\x08\x12\x10\n\x08\x61st_data\x18\x03 \x01(\x0c\x12%\n\x06\x65rrors\x18\x04 \x03(\x0b\x32\x15.codeaudit.ParseError\x12*\n\x08metadata\x18\x05 \x01(\x0b\x32\x18.codeaudit.ParseMetadata\"O\n\nParseError\x12\x0c\n\x04line\x18\x01 \x01(\x05\x12\x0e\n\x06\x63olumn\x18\x02 \x01(\x05\x12\x0f\n\x07message\x18\x03 \x01(\t\x12\x12\n\nerror_type\x18\x04 \x01(\t\"\x85\x01\n\rParseMetadata\x12\x15\n\rparse_time_ms\x18\x01 \x01(\x03\x12\x13\n\x0btotal_lines\x18\x02 \x01(\x05\x12\x17\n\x0ftotal_functions\x18\x03 \x01(\x05\x12\x15\n\rtotal_classes\x18\x04 \x01(\x05\x12\x18\n\x10language_version\x18\x05 \x01(\t\"V\n\x11\x42\x61tchParseRequest\x12)\n\x08requests\x18\x01 \x03(\x0b\x32\x17.codeaudit.ParseRequest\x12\x16\n\x0emax_concurrent\x18\x02 \x01(\x05\"\xe5\x01\n\x07\x41STNode\x12\n\n\x02id\x18\x01 \x01(\t\x12\x0c\n\x04type\x18\x02 \x01(\t\x12\x0c\n\x04name\x18\x03 \x01(\t\x12\x12\n\nstart_line\x18\x04 \x01(\x05\x12\x14\n\x0cstart_column\x18\x05 \x01(\x05\x12\x10\n\x08\x65nd_line\x18\x06 \x01(\x05\x12\x12\n\nend_column\x18\x07 \x01(\x05\x12\x13\n\x0bsource_code\x18\x08 \x01(\t\x12$\n\x08\x63hildren\x18\t \x03(\x0b\x32\x12.codeaudit.ASTNode\x12\'\n\nattributes\x18\n \x03(\x0b\x32\x13.codeaudit.KeyValue\"&\n\x08KeyValue\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t\"Y\n\x0fScanFileRequest\x12\x11\n\tfile_path\x18\x01 \x01(\t\x12\x10\n\x08language\x18\x02 \x01(\t\x12\x0f\n\x07\x63ontent\x18\x03 \x01(\t\x12\x10\n\x08rule_ids\x18\x04 \x03(\t\"\x9e\x01\n\x10ScanFileResponse\x12\x0f\n\x07success\x18\x01 \x01(\x08\x12\x11\n\tfile_path\x18\x02 \x01(\t\x12\x10\n\x08language\x18\x03 \x01(\t\x12\x31\n\x08\x66indings\x18\x04 \x03(\x0b\x32\x1f.codeaudit.VulnerabilityFinding\x12\x12\n\nstatistics\x18\x05 \x01(\t\x12\r\n\x05\x65rror\x18\x06 \x01(\t\"O\n\x10ScanBatchRequest\x12)\n\x05\x66iles\x18\x01 \x03(\x0b\x32\x1a.codeaudit.ScanFileRequest\x12\x10\n\x08rule_ids\x18\x02 \x03(\t\"]\n\x11ScanBatchResponse\x12,\n\x07results\x18\x01 \x03(\x0b\x32\x1b.codeaudit.ScanFileResponse\x12\x1a\n\x12overall_statistics\x18\x02 \x01(\t\"\xd2\x01\n\x14VulnerabilityFinding\x12\x0f\n\x07rule_id\x18\x01 \x01(\t\x12\x11\n\trule_name\x18\x02 \x01(\t\x12\x10\n\x08\x63\x61tegory\x18\x03 \x01(\t\x12\x10\n\x08severity\x18\x04 \x01(\t\x12\x0f\n\x07message\x18\x05 \x01(\t\x12\x11\n\tfile_path\x18\x06 \x01(\t\x12\x0c\n\x04line\x18\x07 \x01(\x05\x12\x0e\n\x06\x63olumn\x18\x08 \x01(\x05\x12\x0c\n\x04\x63ode\x18\t \x01(\t\x12\x10\n\x08language\x18\n \x01(\t\x12\x10\n\x08metadata\x18\x0b \x01(\t\"5\n\x0fGetRulesRequest\x12\x10\n\x08language\x18\x01 \x01(\t\x12\x10\n\x08\x63\x61tegory\x18\x02 \x01(\t\"?\n\x10GetRulesResponse\x12+\n\x05rules\x18\x01 \x03(\x0b\x32\x1c.codeaudit.VulnerabilityRule\"%\n\x12GetRuleByIdRequest\x12\x0f\n\x07rule_id\x18\x01 \x01(\t\"P\n\x13GetRuleByIdResponse\x12\r\n\x05\x66ound\x18\x01 \x01(\x08\x12*\n\x04rule\x18\x02 \x01(\x0b\x32\x1c.codeaudit.VulnerabilityRule\"\xd1\x01\n\x11VulnerabilityRule\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\n\n\x02id\x18\x02 \x01(\t\x12\x10\n\x08\x63\x61tegory\x18\x03 \x01(\t\x12\x10\n\x08severity\x18\x04 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x05 \x01(\t\x12\x10\n\x08language\x18\x06 \x03(\t\x12(\n\x08patterns\x18\x07 \x03(\x0b\x32\x16.codeaudit.RulePattern\x12-\n\rsafe_patterns\x18\x08 \x03(\x0b\x32\x16.codeaudit.RulePattern\"S\n\x0bRulePattern\x12\x0f\n\x07pattern\x18\x01 \x01(\t\x12\x0f\n\x07message\x18\x02 \x01(\t\x12\x10\n\x08severity\x18\x03 \x01(\t\x12\x10\n\x08language\x18\x04 \x03(\t*\xa7\x01\n\x08Language\x12\x0b\n\x07UNKNOWN\x10\x00\x12\x06\n\x02GO\x10\x01\x12\n\n\x06PYTHON\x10\x02\x12\x08\n\x04JAVA\x10\x03\x12\x0e\n\nJAVASCRIPT\x10\x04\x12\x0e\n\nTYPESCRIPT\x10\x05\x12\x07\n\x03PHP\x10\x06\x12\x08\n\x04RUBY\x10\x07\x12\x08\n\x04RUST\x10\x08\x12\n\n\x06\x43SHARP\x10\t\x12\x07\n\x03\x43PP\x10\n\x12\x05\n\x01\x43\x10\x0b\x12\x0c\n\x08SOLIDITY\x10\x0c\x12\t\n\x05VYPER\x10\r2\x93\x01\n\tASTParser\x12>\n\tParseFile\x12\x17.codeaudit.ParseRequest\x1a\x18.codeaudit.ParseResponse\x12\x46\n\nParseBatch\x12\x1c.codeaudit.BatchParseRequest\x1a\x18.codeaudit.ParseResponse0\x01\x32\xb7\x02\n\x15VulnerabilityDetector\x12\x43\n\x08ScanFile\x12\x1a.codeaudit.ScanFileRequest\x1a\x1b.codeaudit.ScanFileResponse\x12\x46\n\tScanBatch\x12\x1b.codeaudit.ScanBatchRequest\x1a\x1c.codeaudit.ScanBatchResponse\x12\x43\n\x08GetRules\x12\x1a.codeaudit.GetRulesRequest\x1a\x1b.codeaudit.GetRulesResponse\x12L\n\x0bGetRuleById\x12\x1d.codeaudit.GetRuleByIdRequest\x1a\x1e.codeaudit.GetRuleByIdResponseB\x1e\n\x13\x63om.codeaudit.protoZ\x07./protob\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'proto.ast_parser_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n\023com.codeaudit.protoZ\007./proto'
  _globals['_LANGUAGE']._serialized_start=2045
  _globals['_LANGUAGE']._serialized_end=2212
  _globals['_PARSEREQUEST']._serialized_start=37
  _globals['_PARSEREQUEST']._serialized_end=131
  _globals['_PARSERESPONSE']._serialized_start=134
  _globals['_PARSERESPONSE']._serialized_end=286
  _globals['_PARSEERROR']._serialized_start=288
  _globals['_PARSEERROR']._serialized_end=367
  _globals['_PARSEMETADATA']._serialized_start=370
  _globals['_PARSEMETADATA']._serialized_end=503
  _globals['_BATCHPARSEREQUEST']._serialized_start=505
  _globals['_BATCHPARSEREQUEST']._serialized_end=591
  _globals['_ASTNODE']._serialized_start=594
  _globals['_ASTNODE']._serialized_end=823
  _globals['_KEYVALUE']._serialized_start=825
  _globals['_KEYVALUE']._serialized_end=863
  _globals['_SCANFILEREQUEST']._serialized_start=865
  _globals['_SCANFILEREQUEST']._serialized_end=954
  _globals['_SCANFILERESPONSE']._serialized_start=957
  _globals['_SCANFILERESPONSE']._serialized_end=1115
  _globals['_SCANBATCHREQUEST']._serialized_start=1117
  _globals['_SCANBATCHREQUEST']._serialized_end=1196
  _globals['_SCANBATCHRESPONSE']._serialized_start=1198
  _globals['_SCANBATCHRESPONSE']._serialized_end=1291
  _globals['_VULNERABILITYFINDING']._serialized_start=1294
  _globals['_VULNERABILITYFINDING']._serialized_end=1504
  _globals['_GETRULESREQUEST']._serialized_start=1506
  _globals['_GETRULESREQUEST']._serialized_end=1559
  _globals['_GETRULESRESPONSE']._serialized_start=1561
  _globals['_GETRULESRESPONSE']._serialized_end=1624
  _globals['_GETRULEBYIDREQUEST']._serialized_start=1626
  _globals['_GETRULEBYIDREQUEST']._serialized_end=1663
  _globals['_GETRULEBYIDRESPONSE']._serialized_start=1665
  _globals['_GETRULEBYIDRESPONSE']._serialized_end=1745
  _globals['_VULNERABILITYRULE']._serialized_start=1748
  _globals['_VULNERABILITYRULE']._serialized_end=1957
  _globals['_RULEPATTERN']._serialized_start=1959
  _globals['_RULEPATTERN']._serialized_end=2042
  _globals['_ASTPARSER']._serialized_start=2215
  _globals['_ASTPARSER']._serialized_end=2362
  _globals['_VULNERABILITYDETECTOR']._serialized_start=2365
  _globals['_VULNERABILITYDETECTOR']._serialized_end=2676
# @@protoc_insertion_point(module_scope)
