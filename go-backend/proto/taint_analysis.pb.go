// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: taint_analysis.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 污点源枚举
type TaintSourceType int32

const (
	TaintSourceType_UNKNOWN_SOURCE       TaintSourceType = 0
	TaintSourceType_USER_INPUT           TaintSourceType = 1 // 用户输入
	TaintSourceType_HTTP_REQUEST         TaintSourceType = 2 // HTTP请求
	TaintSourceType_FILE_INPUT           TaintSourceType = 3 // 文件输入
	TaintSourceType_DATABASE_QUERY       TaintSourceType = 4 // 数据库查询
	TaintSourceType_ENVIRONMENT_VARIABLE TaintSourceType = 5 // 环境变量
	TaintSourceType_NETWORK_INPUT        TaintSourceType = 6 // 网络输入
	TaintSourceType_COMMAND_LINE_ARGS    TaintSourceType = 7 // 命令行参数
)

// Enum value maps for TaintSourceType.
var (
	TaintSourceType_name = map[int32]string{
		0: "UNKNOWN_SOURCE",
		1: "USER_INPUT",
		2: "HTTP_REQUEST",
		3: "FILE_INPUT",
		4: "DATABASE_QUERY",
		5: "ENVIRONMENT_VARIABLE",
		6: "NETWORK_INPUT",
		7: "COMMAND_LINE_ARGS",
	}
	TaintSourceType_value = map[string]int32{
		"UNKNOWN_SOURCE":       0,
		"USER_INPUT":           1,
		"HTTP_REQUEST":         2,
		"FILE_INPUT":           3,
		"DATABASE_QUERY":       4,
		"ENVIRONMENT_VARIABLE": 5,
		"NETWORK_INPUT":        6,
		"COMMAND_LINE_ARGS":    7,
	}
)

func (x TaintSourceType) Enum() *TaintSourceType {
	p := new(TaintSourceType)
	*p = x
	return p
}

func (x TaintSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaintSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_taint_analysis_proto_enumTypes[0].Descriptor()
}

func (TaintSourceType) Type() protoreflect.EnumType {
	return &file_taint_analysis_proto_enumTypes[0]
}

func (x TaintSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaintSourceType.Descriptor instead.
func (TaintSourceType) EnumDescriptor() ([]byte, []int) {
	return file_taint_analysis_proto_rawDescGZIP(), []int{0}
}

// 污点汇枚举
type TaintSinkType int32

const (
	TaintSinkType_UNKNOWN_SINK      TaintSinkType = 0
	TaintSinkType_SQL_QUERY         TaintSinkType = 1 // SQL查询
	TaintSinkType_COMMAND_EXECUTION TaintSinkType = 2 // 命令执行
	TaintSinkType_HTML_OUTPUT       TaintSinkType = 3 // HTML输出
	TaintSinkType_FILE_WRITE        TaintSinkType = 4 // 文件写入
	TaintSinkType_EVAL              TaintSinkType = 5 // eval()执行
	TaintSinkType_XPATH_QUERY       TaintSinkType = 6 // XPath查询
	TaintSinkType_LDAP_QUERY        TaintSinkType = 7 // LDAP查询
	TaintSinkType_URL_REDIRECT      TaintSinkType = 8 // URL重定向
)

// Enum value maps for TaintSinkType.
var (
	TaintSinkType_name = map[int32]string{
		0: "UNKNOWN_SINK",
		1: "SQL_QUERY",
		2: "COMMAND_EXECUTION",
		3: "HTML_OUTPUT",
		4: "FILE_WRITE",
		5: "EVAL",
		6: "XPATH_QUERY",
		7: "LDAP_QUERY",
		8: "URL_REDIRECT",
	}
	TaintSinkType_value = map[string]int32{
		"UNKNOWN_SINK":      0,
		"SQL_QUERY":         1,
		"COMMAND_EXECUTION": 2,
		"HTML_OUTPUT":       3,
		"FILE_WRITE":        4,
		"EVAL":              5,
		"XPATH_QUERY":       6,
		"LDAP_QUERY":        7,
		"URL_REDIRECT":      8,
	}
)

func (x TaintSinkType) Enum() *TaintSinkType {
	p := new(TaintSinkType)
	*p = x
	return p
}

func (x TaintSinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaintSinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_taint_analysis_proto_enumTypes[1].Descriptor()
}

func (TaintSinkType) Type() protoreflect.EnumType {
	return &file_taint_analysis_proto_enumTypes[1]
}

func (x TaintSinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaintSinkType.Descriptor instead.
func (TaintSinkType) EnumDescriptor() ([]byte, []int) {
	return file_taint_analysis_proto_rawDescGZIP(), []int{1}
}

// 污点分析请求
type TaintAnalysisRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	FilePath          string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`                            // 文件路径
	EntryFunction     string                 `protobuf:"bytes,2,opt,name=entry_function,json=entryFunction,proto3" json:"entry_function,omitempty"`             // 入口函数
	SourcePatterns    []string               `protobuf:"bytes,3,rep,name=source_patterns,json=sourcePatterns,proto3" json:"source_patterns,omitempty"`          // 污点源模式
	SinkPatterns      []string               `protobuf:"bytes,4,rep,name=sink_patterns,json=sinkPatterns,proto3" json:"sink_patterns,omitempty"`                // 污点汇模式
	SanitizerPatterns []string               `protobuf:"bytes,5,rep,name=sanitizer_patterns,json=sanitizerPatterns,proto3" json:"sanitizer_patterns,omitempty"` // 净化函数模式
	MaxDepth          int32                  `protobuf:"varint,6,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`                           // 最大追踪深度
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TaintAnalysisRequest) Reset() {
	*x = TaintAnalysisRequest{}
	mi := &file_taint_analysis_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaintAnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaintAnalysisRequest) ProtoMessage() {}

func (x *TaintAnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taint_analysis_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaintAnalysisRequest.ProtoReflect.Descriptor instead.
func (*TaintAnalysisRequest) Descriptor() ([]byte, []int) {
	return file_taint_analysis_proto_rawDescGZIP(), []int{0}
}

func (x *TaintAnalysisRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *TaintAnalysisRequest) GetEntryFunction() string {
	if x != nil {
		return x.EntryFunction
	}
	return ""
}

func (x *TaintAnalysisRequest) GetSourcePatterns() []string {
	if x != nil {
		return x.SourcePatterns
	}
	return nil
}

func (x *TaintAnalysisRequest) GetSinkPatterns() []string {
	if x != nil {
		return x.SinkPatterns
	}
	return nil
}

func (x *TaintAnalysisRequest) GetSanitizerPatterns() []string {
	if x != nil {
		return x.SanitizerPatterns
	}
	return nil
}

func (x *TaintAnalysisRequest) GetMaxDepth() int32 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

// 污点分析响应
type TaintAnalysisResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Success         bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                                       // 是否成功
	Vulnerabilities []*TaintVulnerability  `protobuf:"bytes,2,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`                        // 发现的漏洞
	AnalysisTimeMs  int32                  `protobuf:"varint,3,opt,name=analysis_time_ms,json=analysisTimeMs,proto3" json:"analysis_time_ms,omitempty"` // 分析耗时
	ErrorMessage    string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`          // 错误信息
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TaintAnalysisResponse) Reset() {
	*x = TaintAnalysisResponse{}
	mi := &file_taint_analysis_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaintAnalysisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaintAnalysisResponse) ProtoMessage() {}

func (x *TaintAnalysisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taint_analysis_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaintAnalysisResponse.ProtoReflect.Descriptor instead.
func (*TaintAnalysisResponse) Descriptor() ([]byte, []int) {
	return file_taint_analysis_proto_rawDescGZIP(), []int{1}
}

func (x *TaintAnalysisResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TaintAnalysisResponse) GetVulnerabilities() []*TaintVulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

func (x *TaintAnalysisResponse) GetAnalysisTimeMs() int32 {
	if x != nil {
		return x.AnalysisTimeMs
	}
	return 0
}

func (x *TaintAnalysisResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 污点漏洞
type TaintVulnerability struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                   // 漏洞ID
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`               // 漏洞类型（SQL Injection, XSS等）
	Severity      string                 `protobuf:"bytes,3,opt,name=severity,proto3" json:"severity,omitempty"`       // 严重性（Critical, High, Medium, Low）
	Source        string                 `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`           // 污点源
	Sink          string                 `protobuf:"bytes,5,opt,name=sink,proto3" json:"sink,omitempty"`               // 污点汇
	Path          []*PathNode            `protobuf:"bytes,6,rep,name=path,proto3" json:"path,omitempty"`               // 污点路径
	Confidence    float64                `protobuf:"fixed64,7,opt,name=confidence,proto3" json:"confidence,omitempty"` // 置信度（0-1）
	Description   string                 `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"` // 描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaintVulnerability) Reset() {
	*x = TaintVulnerability{}
	mi := &file_taint_analysis_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaintVulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaintVulnerability) ProtoMessage() {}

func (x *TaintVulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_taint_analysis_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaintVulnerability.ProtoReflect.Descriptor instead.
func (*TaintVulnerability) Descriptor() ([]byte, []int) {
	return file_taint_analysis_proto_rawDescGZIP(), []int{2}
}

func (x *TaintVulnerability) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaintVulnerability) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TaintVulnerability) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *TaintVulnerability) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TaintVulnerability) GetSink() string {
	if x != nil {
		return x.Sink
	}
	return ""
}

func (x *TaintVulnerability) GetPath() []*PathNode {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *TaintVulnerability) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *TaintVulnerability) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 污点路径节点
type PathNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                   // 节点ID
	FunctionName  string                 `protobuf:"bytes,2,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"` // 函数名
	FilePath      string                 `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`             // 文件路径
	LineNumber    int32                  `protobuf:"varint,4,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`      // 行号
	Operation     string                 `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`                           // 操作类型（assignment, call, return等）
	VariableName  string                 `protobuf:"bytes,6,opt,name=variable_name,json=variableName,proto3" json:"variable_name,omitempty"` // 变量名
	DataFlow      string                 `protobuf:"bytes,7,opt,name=data_flow,json=dataFlow,proto3" json:"data_flow,omitempty"`             // 数据流描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathNode) Reset() {
	*x = PathNode{}
	mi := &file_taint_analysis_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathNode) ProtoMessage() {}

func (x *PathNode) ProtoReflect() protoreflect.Message {
	mi := &file_taint_analysis_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathNode.ProtoReflect.Descriptor instead.
func (*PathNode) Descriptor() ([]byte, []int) {
	return file_taint_analysis_proto_rawDescGZIP(), []int{3}
}

func (x *PathNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PathNode) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *PathNode) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *PathNode) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *PathNode) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *PathNode) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *PathNode) GetDataFlow() string {
	if x != nil {
		return x.DataFlow
	}
	return ""
}

// 追踪路径请求
type TracePathRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SourceFunction string                 `protobuf:"bytes,1,opt,name=source_function,json=sourceFunction,proto3" json:"source_function,omitempty"` // 源函数
	SinkFunction   string                 `protobuf:"bytes,2,opt,name=sink_function,json=sinkFunction,proto3" json:"sink_function,omitempty"`       // 汇函数
	MaxPaths       int32                  `protobuf:"varint,3,opt,name=max_paths,json=maxPaths,proto3" json:"max_paths,omitempty"`                  // 最多返回路径数
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TracePathRequest) Reset() {
	*x = TracePathRequest{}
	mi := &file_taint_analysis_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracePathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracePathRequest) ProtoMessage() {}

func (x *TracePathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taint_analysis_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracePathRequest.ProtoReflect.Descriptor instead.
func (*TracePathRequest) Descriptor() ([]byte, []int) {
	return file_taint_analysis_proto_rawDescGZIP(), []int{4}
}

func (x *TracePathRequest) GetSourceFunction() string {
	if x != nil {
		return x.SourceFunction
	}
	return ""
}

func (x *TracePathRequest) GetSinkFunction() string {
	if x != nil {
		return x.SinkFunction
	}
	return ""
}

func (x *TracePathRequest) GetMaxPaths() int32 {
	if x != nil {
		return x.MaxPaths
	}
	return 0
}

// 路径段
type PathSegment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PathIndex     int32                  `protobuf:"varint,1,opt,name=path_index,json=pathIndex,proto3" json:"path_index,omitempty"`          // 路径序号
	Nodes         []*PathNode            `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`                                    // 路径节点
	HasSanitizer  bool                   `protobuf:"varint,3,opt,name=has_sanitizer,json=hasSanitizer,proto3" json:"has_sanitizer,omitempty"` // 是否包含净化函数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathSegment) Reset() {
	*x = PathSegment{}
	mi := &file_taint_analysis_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathSegment) ProtoMessage() {}

func (x *PathSegment) ProtoReflect() protoreflect.Message {
	mi := &file_taint_analysis_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathSegment.ProtoReflect.Descriptor instead.
func (*PathSegment) Descriptor() ([]byte, []int) {
	return file_taint_analysis_proto_rawDescGZIP(), []int{5}
}

func (x *PathSegment) GetPathIndex() int32 {
	if x != nil {
		return x.PathIndex
	}
	return 0
}

func (x *PathSegment) GetNodes() []*PathNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *PathSegment) GetHasSanitizer() bool {
	if x != nil {
		return x.HasSanitizer
	}
	return false
}

// 查询污点源请求
type QuerySourcesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pattern       string                 `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`   // 源模式（正则表达式）
	Language      string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"` // 编程语言
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySourcesRequest) Reset() {
	*x = QuerySourcesRequest{}
	mi := &file_taint_analysis_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySourcesRequest) ProtoMessage() {}

func (x *QuerySourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taint_analysis_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySourcesRequest.ProtoReflect.Descriptor instead.
func (*QuerySourcesRequest) Descriptor() ([]byte, []int) {
	return file_taint_analysis_proto_rawDescGZIP(), []int{6}
}

func (x *QuerySourcesRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *QuerySourcesRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// 污点源信息
type SourceInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                   // 源ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`               // 源名称
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`               // 源类型（用户输入、HTTP请求等）
	Keywords      []string               `protobuf:"bytes,4,rep,name=keywords,proto3" json:"keywords,omitempty"`       // 关键字
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"` // 描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceInfo) Reset() {
	*x = SourceInfo{}
	mi := &file_taint_analysis_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceInfo) ProtoMessage() {}

func (x *SourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_taint_analysis_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceInfo.ProtoReflect.Descriptor instead.
func (*SourceInfo) Descriptor() ([]byte, []int) {
	return file_taint_analysis_proto_rawDescGZIP(), []int{7}
}

func (x *SourceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SourceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SourceInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SourceInfo) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *SourceInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 查询污点源响应
type QuerySourcesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sources       []*SourceInfo          `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`                          // 污点源列表
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 总数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySourcesResponse) Reset() {
	*x = QuerySourcesResponse{}
	mi := &file_taint_analysis_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySourcesResponse) ProtoMessage() {}

func (x *QuerySourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taint_analysis_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySourcesResponse.ProtoReflect.Descriptor instead.
func (*QuerySourcesResponse) Descriptor() ([]byte, []int) {
	return file_taint_analysis_proto_rawDescGZIP(), []int{8}
}

func (x *QuerySourcesResponse) GetSources() []*SourceInfo {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *QuerySourcesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// 查询污点汇请求
type QuerySinksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pattern       string                 `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`   // 汇模式（正则表达式）
	Language      string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"` // 编程语言
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySinksRequest) Reset() {
	*x = QuerySinksRequest{}
	mi := &file_taint_analysis_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySinksRequest) ProtoMessage() {}

func (x *QuerySinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taint_analysis_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySinksRequest.ProtoReflect.Descriptor instead.
func (*QuerySinksRequest) Descriptor() ([]byte, []int) {
	return file_taint_analysis_proto_rawDescGZIP(), []int{9}
}

func (x *QuerySinksRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *QuerySinksRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// 污点汇信息
type SinkInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                        // 汇ID
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                    // 汇名称
	Type              string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                    // 汇类型（数据库操作、命令执行等）
	Keywords          []string               `protobuf:"bytes,4,rep,name=keywords,proto3" json:"keywords,omitempty"`                                            // 关键字
	VulnerabilityType string                 `protobuf:"bytes,5,opt,name=vulnerability_type,json=vulnerabilityType,proto3" json:"vulnerability_type,omitempty"` // 关联的漏洞类型
	Description       string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                                      // 描述
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SinkInfo) Reset() {
	*x = SinkInfo{}
	mi := &file_taint_analysis_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SinkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinkInfo) ProtoMessage() {}

func (x *SinkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_taint_analysis_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinkInfo.ProtoReflect.Descriptor instead.
func (*SinkInfo) Descriptor() ([]byte, []int) {
	return file_taint_analysis_proto_rawDescGZIP(), []int{10}
}

func (x *SinkInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SinkInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SinkInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SinkInfo) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *SinkInfo) GetVulnerabilityType() string {
	if x != nil {
		return x.VulnerabilityType
	}
	return ""
}

func (x *SinkInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 查询污点汇响应
type QuerySinksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sinks         []*SinkInfo            `protobuf:"bytes,1,rep,name=sinks,proto3" json:"sinks,omitempty"`                              // 污点汇列表
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 总数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuerySinksResponse) Reset() {
	*x = QuerySinksResponse{}
	mi := &file_taint_analysis_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuerySinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySinksResponse) ProtoMessage() {}

func (x *QuerySinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_taint_analysis_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySinksResponse.ProtoReflect.Descriptor instead.
func (*QuerySinksResponse) Descriptor() ([]byte, []int) {
	return file_taint_analysis_proto_rawDescGZIP(), []int{11}
}

func (x *QuerySinksResponse) GetSinks() []*SinkInfo {
	if x != nil {
		return x.Sinks
	}
	return nil
}

func (x *QuerySinksResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_taint_analysis_proto protoreflect.FileDescriptor

const file_taint_analysis_proto_rawDesc = "" +
	"\n" +
	"\x14taint_analysis.proto\x12\tcodeaudit\"\xf4\x01\n" +
	"\x14TaintAnalysisRequest\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\x12%\n" +
	"\x0eentry_function\x18\x02 \x01(\tR\rentryFunction\x12'\n" +
	"\x0fsource_patterns\x18\x03 \x03(\tR\x0esourcePatterns\x12#\n" +
	"\rsink_patterns\x18\x04 \x03(\tR\fsinkPatterns\x12-\n" +
	"\x12sanitizer_patterns\x18\x05 \x03(\tR\x11sanitizerPatterns\x12\x1b\n" +
	"\tmax_depth\x18\x06 \x01(\x05R\bmaxDepth\"\xc9\x01\n" +
	"\x15TaintAnalysisResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12G\n" +
	"\x0fvulnerabilities\x18\x02 \x03(\v2\x1d.codeaudit.TaintVulnerabilityR\x0fvulnerabilities\x12(\n" +
	"\x10analysis_time_ms\x18\x03 \x01(\x05R\x0eanalysisTimeMs\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\"\xeb\x01\n" +
	"\x12TaintVulnerability\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x1a\n" +
	"\bseverity\x18\x03 \x01(\tR\bseverity\x12\x16\n" +
	"\x06source\x18\x04 \x01(\tR\x06source\x12\x12\n" +
	"\x04sink\x18\x05 \x01(\tR\x04sink\x12'\n" +
	"\x04path\x18\x06 \x03(\v2\x13.codeaudit.PathNodeR\x04path\x12\x1e\n" +
	"\n" +
	"confidence\x18\a \x01(\x01R\n" +
	"confidence\x12 \n" +
	"\vdescription\x18\b \x01(\tR\vdescription\"\xe6\x01\n" +
	"\bPathNode\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12#\n" +
	"\rfunction_name\x18\x02 \x01(\tR\ffunctionName\x12\x1b\n" +
	"\tfile_path\x18\x03 \x01(\tR\bfilePath\x12\x1f\n" +
	"\vline_number\x18\x04 \x01(\x05R\n" +
	"lineNumber\x12\x1c\n" +
	"\toperation\x18\x05 \x01(\tR\toperation\x12#\n" +
	"\rvariable_name\x18\x06 \x01(\tR\fvariableName\x12\x1b\n" +
	"\tdata_flow\x18\a \x01(\tR\bdataFlow\"}\n" +
	"\x10TracePathRequest\x12'\n" +
	"\x0fsource_function\x18\x01 \x01(\tR\x0esourceFunction\x12#\n" +
	"\rsink_function\x18\x02 \x01(\tR\fsinkFunction\x12\x1b\n" +
	"\tmax_paths\x18\x03 \x01(\x05R\bmaxPaths\"|\n" +
	"\vPathSegment\x12\x1d\n" +
	"\n" +
	"path_index\x18\x01 \x01(\x05R\tpathIndex\x12)\n" +
	"\x05nodes\x18\x02 \x03(\v2\x13.codeaudit.PathNodeR\x05nodes\x12#\n" +
	"\rhas_sanitizer\x18\x03 \x01(\bR\fhasSanitizer\"K\n" +
	"\x13QuerySourcesRequest\x12\x18\n" +
	"\apattern\x18\x01 \x01(\tR\apattern\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\"\x82\x01\n" +
	"\n" +
	"SourceInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x1a\n" +
	"\bkeywords\x18\x04 \x03(\tR\bkeywords\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\"h\n" +
	"\x14QuerySourcesResponse\x12/\n" +
	"\asources\x18\x01 \x03(\v2\x15.codeaudit.SourceInfoR\asources\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\"I\n" +
	"\x11QuerySinksRequest\x12\x18\n" +
	"\apattern\x18\x01 \x01(\tR\apattern\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\"\xaf\x01\n" +
	"\bSinkInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x1a\n" +
	"\bkeywords\x18\x04 \x03(\tR\bkeywords\x12-\n" +
	"\x12vulnerability_type\x18\x05 \x01(\tR\x11vulnerabilityType\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\"`\n" +
	"\x12QuerySinksResponse\x12)\n" +
	"\x05sinks\x18\x01 \x03(\v2\x13.codeaudit.SinkInfoR\x05sinks\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount*\xaf\x01\n" +
	"\x0fTaintSourceType\x12\x12\n" +
	"\x0eUNKNOWN_SOURCE\x10\x00\x12\x0e\n" +
	"\n" +
	"USER_INPUT\x10\x01\x12\x10\n" +
	"\fHTTP_REQUEST\x10\x02\x12\x0e\n" +
	"\n" +
	"FILE_INPUT\x10\x03\x12\x12\n" +
	"\x0eDATABASE_QUERY\x10\x04\x12\x18\n" +
	"\x14ENVIRONMENT_VARIABLE\x10\x05\x12\x11\n" +
	"\rNETWORK_INPUT\x10\x06\x12\x15\n" +
	"\x11COMMAND_LINE_ARGS\x10\a*\xa5\x01\n" +
	"\rTaintSinkType\x12\x10\n" +
	"\fUNKNOWN_SINK\x10\x00\x12\r\n" +
	"\tSQL_QUERY\x10\x01\x12\x15\n" +
	"\x11COMMAND_EXECUTION\x10\x02\x12\x0f\n" +
	"\vHTML_OUTPUT\x10\x03\x12\x0e\n" +
	"\n" +
	"FILE_WRITE\x10\x04\x12\b\n" +
	"\x04EVAL\x10\x05\x12\x0f\n" +
	"\vXPATH_QUERY\x10\x06\x12\x0e\n" +
	"\n" +
	"LDAP_QUERY\x10\a\x12\x10\n" +
	"\fURL_REDIRECT\x10\b2\xc2\x02\n" +
	"\rTaintAnalyzer\x12Q\n" +
	"\fAnalyzeTaint\x12\x1f.codeaudit.TaintAnalysisRequest\x1a .codeaudit.TaintAnalysisResponse\x12B\n" +
	"\tTracePath\x12\x1b.codeaudit.TracePathRequest\x1a\x16.codeaudit.PathSegment0\x01\x12O\n" +
	"\fQuerySources\x12\x1e.codeaudit.QuerySourcesRequest\x1a\x1f.codeaudit.QuerySourcesResponse\x12I\n" +
	"\n" +
	"QuerySinks\x12\x1c.codeaudit.QuerySinksRequest\x1a\x1d.codeaudit.QuerySinksResponseB\x1e\n" +
	"\x13com.codeaudit.protoZ\a./protob\x06proto3"

var (
	file_taint_analysis_proto_rawDescOnce sync.Once
	file_taint_analysis_proto_rawDescData []byte
)

func file_taint_analysis_proto_rawDescGZIP() []byte {
	file_taint_analysis_proto_rawDescOnce.Do(func() {
		file_taint_analysis_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_taint_analysis_proto_rawDesc), len(file_taint_analysis_proto_rawDesc)))
	})
	return file_taint_analysis_proto_rawDescData
}

var file_taint_analysis_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_taint_analysis_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_taint_analysis_proto_goTypes = []any{
	(TaintSourceType)(0),          // 0: codeaudit.TaintSourceType
	(TaintSinkType)(0),            // 1: codeaudit.TaintSinkType
	(*TaintAnalysisRequest)(nil),  // 2: codeaudit.TaintAnalysisRequest
	(*TaintAnalysisResponse)(nil), // 3: codeaudit.TaintAnalysisResponse
	(*TaintVulnerability)(nil),    // 4: codeaudit.TaintVulnerability
	(*PathNode)(nil),              // 5: codeaudit.PathNode
	(*TracePathRequest)(nil),      // 6: codeaudit.TracePathRequest
	(*PathSegment)(nil),           // 7: codeaudit.PathSegment
	(*QuerySourcesRequest)(nil),   // 8: codeaudit.QuerySourcesRequest
	(*SourceInfo)(nil),            // 9: codeaudit.SourceInfo
	(*QuerySourcesResponse)(nil),  // 10: codeaudit.QuerySourcesResponse
	(*QuerySinksRequest)(nil),     // 11: codeaudit.QuerySinksRequest
	(*SinkInfo)(nil),              // 12: codeaudit.SinkInfo
	(*QuerySinksResponse)(nil),    // 13: codeaudit.QuerySinksResponse
}
var file_taint_analysis_proto_depIdxs = []int32{
	4,  // 0: codeaudit.TaintAnalysisResponse.vulnerabilities:type_name -> codeaudit.TaintVulnerability
	5,  // 1: codeaudit.TaintVulnerability.path:type_name -> codeaudit.PathNode
	5,  // 2: codeaudit.PathSegment.nodes:type_name -> codeaudit.PathNode
	9,  // 3: codeaudit.QuerySourcesResponse.sources:type_name -> codeaudit.SourceInfo
	12, // 4: codeaudit.QuerySinksResponse.sinks:type_name -> codeaudit.SinkInfo
	2,  // 5: codeaudit.TaintAnalyzer.AnalyzeTaint:input_type -> codeaudit.TaintAnalysisRequest
	6,  // 6: codeaudit.TaintAnalyzer.TracePath:input_type -> codeaudit.TracePathRequest
	8,  // 7: codeaudit.TaintAnalyzer.QuerySources:input_type -> codeaudit.QuerySourcesRequest
	11, // 8: codeaudit.TaintAnalyzer.QuerySinks:input_type -> codeaudit.QuerySinksRequest
	3,  // 9: codeaudit.TaintAnalyzer.AnalyzeTaint:output_type -> codeaudit.TaintAnalysisResponse
	7,  // 10: codeaudit.TaintAnalyzer.TracePath:output_type -> codeaudit.PathSegment
	10, // 11: codeaudit.TaintAnalyzer.QuerySources:output_type -> codeaudit.QuerySourcesResponse
	13, // 12: codeaudit.TaintAnalyzer.QuerySinks:output_type -> codeaudit.QuerySinksResponse
	9,  // [9:13] is the sub-list for method output_type
	5,  // [5:9] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_taint_analysis_proto_init() }
func file_taint_analysis_proto_init() {
	if File_taint_analysis_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_taint_analysis_proto_rawDesc), len(file_taint_analysis_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_taint_analysis_proto_goTypes,
		DependencyIndexes: file_taint_analysis_proto_depIdxs,
		EnumInfos:         file_taint_analysis_proto_enumTypes,
		MessageInfos:      file_taint_analysis_proto_msgTypes,
	}.Build()
	File_taint_analysis_proto = out.File
	file_taint_analysis_proto_goTypes = nil
	file_taint_analysis_proto_depIdxs = nil
}
