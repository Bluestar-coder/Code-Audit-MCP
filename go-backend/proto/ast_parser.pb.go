// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: ast_parser.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 语言信息
type Language int32

const (
	Language_UNKNOWN    Language = 0
	Language_GO         Language = 1
	Language_PYTHON     Language = 2
	Language_JAVA       Language = 3
	Language_JAVASCRIPT Language = 4
	Language_TYPESCRIPT Language = 5
	Language_PHP        Language = 6
	Language_RUBY       Language = 7
	Language_RUST       Language = 8
	Language_CSHARP     Language = 9
	Language_CPP        Language = 10
	Language_C          Language = 11
	Language_SOLIDITY   Language = 12
	Language_VYPER      Language = 13
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "GO",
		2:  "PYTHON",
		3:  "JAVA",
		4:  "JAVASCRIPT",
		5:  "TYPESCRIPT",
		6:  "PHP",
		7:  "RUBY",
		8:  "RUST",
		9:  "CSHARP",
		10: "CPP",
		11: "C",
		12: "SOLIDITY",
		13: "VYPER",
	}
	Language_value = map[string]int32{
		"UNKNOWN":    0,
		"GO":         1,
		"PYTHON":     2,
		"JAVA":       3,
		"JAVASCRIPT": 4,
		"TYPESCRIPT": 5,
		"PHP":        6,
		"RUBY":       7,
		"RUST":       8,
		"CSHARP":     9,
		"CPP":        10,
		"C":          11,
		"SOLIDITY":   12,
		"VYPER":      13,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_parser_proto_enumTypes[0].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_ast_parser_proto_enumTypes[0]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_ast_parser_proto_rawDescGZIP(), []int{0}
}

// 解析单个文件请求
type ParseRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FilePath        string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`                       // 文件路径
	Language        string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`                                       // 编程语言 (go, python, java, javascript, php, etc.)
	Content         []byte                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                                         // 文件内容（如果为空则从file_path读取）
	IncludeMetadata bool                   `protobuf:"varint,4,opt,name=include_metadata,json=includeMetadata,proto3" json:"include_metadata,omitempty"` // 是否包含元数据
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ParseRequest) Reset() {
	*x = ParseRequest{}
	mi := &file_ast_parser_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseRequest) ProtoMessage() {}

func (x *ParseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ast_parser_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseRequest.ProtoReflect.Descriptor instead.
func (*ParseRequest) Descriptor() ([]byte, []int) {
	return file_ast_parser_proto_rawDescGZIP(), []int{0}
}

func (x *ParseRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ParseRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ParseRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ParseRequest) GetIncludeMetadata() bool {
	if x != nil {
		return x.IncludeMetadata
	}
	return false
}

// 解析响应
type ParseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"` // 文件路径
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`                  // 是否成功解析
	AstData       []byte                 `protobuf:"bytes,3,opt,name=ast_data,json=astData,proto3" json:"ast_data,omitempty"`    // 序列化的AST数据（JSON格式）
	Errors        []*ParseError          `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`                     // 解析错误
	Metadata      *ParseMetadata         `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`                 // 元数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseResponse) Reset() {
	*x = ParseResponse{}
	mi := &file_ast_parser_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseResponse) ProtoMessage() {}

func (x *ParseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ast_parser_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseResponse.ProtoReflect.Descriptor instead.
func (*ParseResponse) Descriptor() ([]byte, []int) {
	return file_ast_parser_proto_rawDescGZIP(), []int{1}
}

func (x *ParseResponse) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ParseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ParseResponse) GetAstData() []byte {
	if x != nil {
		return x.AstData
	}
	return nil
}

func (x *ParseResponse) GetErrors() []*ParseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ParseResponse) GetMetadata() *ParseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 解析错误信息
type ParseError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Line          int32                  `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`                           // 错误行号
	Column        int32                  `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`                       // 错误列号
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                      // 错误消息
	ErrorType     string                 `protobuf:"bytes,4,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"` // 错误类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseError) Reset() {
	*x = ParseError{}
	mi := &file_ast_parser_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseError) ProtoMessage() {}

func (x *ParseError) ProtoReflect() protoreflect.Message {
	mi := &file_ast_parser_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseError.ProtoReflect.Descriptor instead.
func (*ParseError) Descriptor() ([]byte, []int) {
	return file_ast_parser_proto_rawDescGZIP(), []int{2}
}

func (x *ParseError) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *ParseError) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *ParseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ParseError) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

// 元数据
type ParseMetadata struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ParseTimeMs     int64                  `protobuf:"varint,1,opt,name=parse_time_ms,json=parseTimeMs,proto3" json:"parse_time_ms,omitempty"`          // 解析耗时（毫秒）
	TotalLines      int32                  `protobuf:"varint,2,opt,name=total_lines,json=totalLines,proto3" json:"total_lines,omitempty"`               // 总行数
	TotalFunctions  int32                  `protobuf:"varint,3,opt,name=total_functions,json=totalFunctions,proto3" json:"total_functions,omitempty"`   // 函数总数
	TotalClasses    int32                  `protobuf:"varint,4,opt,name=total_classes,json=totalClasses,proto3" json:"total_classes,omitempty"`         // 类总数
	LanguageVersion string                 `protobuf:"bytes,5,opt,name=language_version,json=languageVersion,proto3" json:"language_version,omitempty"` // 语言版本
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ParseMetadata) Reset() {
	*x = ParseMetadata{}
	mi := &file_ast_parser_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseMetadata) ProtoMessage() {}

func (x *ParseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ast_parser_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseMetadata.ProtoReflect.Descriptor instead.
func (*ParseMetadata) Descriptor() ([]byte, []int) {
	return file_ast_parser_proto_rawDescGZIP(), []int{3}
}

func (x *ParseMetadata) GetParseTimeMs() int64 {
	if x != nil {
		return x.ParseTimeMs
	}
	return 0
}

func (x *ParseMetadata) GetTotalLines() int32 {
	if x != nil {
		return x.TotalLines
	}
	return 0
}

func (x *ParseMetadata) GetTotalFunctions() int32 {
	if x != nil {
		return x.TotalFunctions
	}
	return 0
}

func (x *ParseMetadata) GetTotalClasses() int32 {
	if x != nil {
		return x.TotalClasses
	}
	return 0
}

func (x *ParseMetadata) GetLanguageVersion() string {
	if x != nil {
		return x.LanguageVersion
	}
	return ""
}

// 批量解析请求
type BatchParseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requests      []*ParseRequest        `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`                                 // 待解析文件列表
	MaxConcurrent int32                  `protobuf:"varint,2,opt,name=max_concurrent,json=maxConcurrent,proto3" json:"max_concurrent,omitempty"` // 最大并发数（默认4）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchParseRequest) Reset() {
	*x = BatchParseRequest{}
	mi := &file_ast_parser_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchParseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchParseRequest) ProtoMessage() {}

func (x *BatchParseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ast_parser_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchParseRequest.ProtoReflect.Descriptor instead.
func (*BatchParseRequest) Descriptor() ([]byte, []int) {
	return file_ast_parser_proto_rawDescGZIP(), []int{4}
}

func (x *BatchParseRequest) GetRequests() []*ParseRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchParseRequest) GetMaxConcurrent() int32 {
	if x != nil {
		return x.MaxConcurrent
	}
	return 0
}

// AST 节点信息
type ASTNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                       // 节点ID
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                                   // 节点类型 (FunctionDecl, ClassDecl, etc.)
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                   // 节点名称
	StartLine     int32                  `protobuf:"varint,4,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`       // 起始行号
	StartColumn   int32                  `protobuf:"varint,5,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"` // 起始列号
	EndLine       int32                  `protobuf:"varint,6,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`             // 结束行号
	EndColumn     int32                  `protobuf:"varint,7,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`       // 结束列号
	SourceCode    string                 `protobuf:"bytes,8,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty"`     // 源代码片段
	Children      []*ASTNode             `protobuf:"bytes,9,rep,name=children,proto3" json:"children,omitempty"`                           // 子节点
	Attributes    []*KeyValue            `protobuf:"bytes,10,rep,name=attributes,proto3" json:"attributes,omitempty"`                      // 额外属性
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ASTNode) Reset() {
	*x = ASTNode{}
	mi := &file_ast_parser_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ASTNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNode) ProtoMessage() {}

func (x *ASTNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_parser_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNode.ProtoReflect.Descriptor instead.
func (*ASTNode) Descriptor() ([]byte, []int) {
	return file_ast_parser_proto_rawDescGZIP(), []int{5}
}

func (x *ASTNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ASTNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ASTNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ASTNode) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *ASTNode) GetStartColumn() int32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *ASTNode) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *ASTNode) GetEndColumn() int32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

func (x *ASTNode) GetSourceCode() string {
	if x != nil {
		return x.SourceCode
	}
	return ""
}

func (x *ASTNode) GetChildren() []*ASTNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *ASTNode) GetAttributes() []*KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// 键值对
type KeyValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	mi := &file_ast_parser_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_ast_parser_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_ast_parser_proto_rawDescGZIP(), []int{6}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_ast_parser_proto protoreflect.FileDescriptor

const file_ast_parser_proto_rawDesc = "" +
	"\n" +
	"\x10ast_parser.proto\x12\tcodeaudit\"\x8c\x01\n" +
	"\fParseRequest\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12\x18\n" +
	"\acontent\x18\x03 \x01(\fR\acontent\x12)\n" +
	"\x10include_metadata\x18\x04 \x01(\bR\x0fincludeMetadata\"\xc6\x01\n" +
	"\rParseResponse\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x19\n" +
	"\bast_data\x18\x03 \x01(\fR\aastData\x12-\n" +
	"\x06errors\x18\x04 \x03(\v2\x15.codeaudit.ParseErrorR\x06errors\x124\n" +
	"\bmetadata\x18\x05 \x01(\v2\x18.codeaudit.ParseMetadataR\bmetadata\"q\n" +
	"\n" +
	"ParseError\x12\x12\n" +
	"\x04line\x18\x01 \x01(\x05R\x04line\x12\x16\n" +
	"\x06column\x18\x02 \x01(\x05R\x06column\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x04 \x01(\tR\terrorType\"\xcd\x01\n" +
	"\rParseMetadata\x12\"\n" +
	"\rparse_time_ms\x18\x01 \x01(\x03R\vparseTimeMs\x12\x1f\n" +
	"\vtotal_lines\x18\x02 \x01(\x05R\n" +
	"totalLines\x12'\n" +
	"\x0ftotal_functions\x18\x03 \x01(\x05R\x0etotalFunctions\x12#\n" +
	"\rtotal_classes\x18\x04 \x01(\x05R\ftotalClasses\x12)\n" +
	"\x10language_version\x18\x05 \x01(\tR\x0flanguageVersion\"o\n" +
	"\x11BatchParseRequest\x123\n" +
	"\brequests\x18\x01 \x03(\v2\x17.codeaudit.ParseRequestR\brequests\x12%\n" +
	"\x0emax_concurrent\x18\x02 \x01(\x05R\rmaxConcurrent\"\xc3\x02\n" +
	"\aASTNode\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"start_line\x18\x04 \x01(\x05R\tstartLine\x12!\n" +
	"\fstart_column\x18\x05 \x01(\x05R\vstartColumn\x12\x19\n" +
	"\bend_line\x18\x06 \x01(\x05R\aendLine\x12\x1d\n" +
	"\n" +
	"end_column\x18\a \x01(\x05R\tendColumn\x12\x1f\n" +
	"\vsource_code\x18\b \x01(\tR\n" +
	"sourceCode\x12.\n" +
	"\bchildren\x18\t \x03(\v2\x12.codeaudit.ASTNodeR\bchildren\x123\n" +
	"\n" +
	"attributes\x18\n" +
	" \x03(\v2\x13.codeaudit.KeyValueR\n" +
	"attributes\"2\n" +
	"\bKeyValue\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value*\xa7\x01\n" +
	"\bLanguage\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x06\n" +
	"\x02GO\x10\x01\x12\n" +
	"\n" +
	"\x06PYTHON\x10\x02\x12\b\n" +
	"\x04JAVA\x10\x03\x12\x0e\n" +
	"\n" +
	"JAVASCRIPT\x10\x04\x12\x0e\n" +
	"\n" +
	"TYPESCRIPT\x10\x05\x12\a\n" +
	"\x03PHP\x10\x06\x12\b\n" +
	"\x04RUBY\x10\a\x12\b\n" +
	"\x04RUST\x10\b\x12\n" +
	"\n" +
	"\x06CSHARP\x10\t\x12\a\n" +
	"\x03CPP\x10\n" +
	"\x12\x05\n" +
	"\x01C\x10\v\x12\f\n" +
	"\bSOLIDITY\x10\f\x12\t\n" +
	"\x05VYPER\x10\r2\x93\x01\n" +
	"\tASTParser\x12>\n" +
	"\tParseFile\x12\x17.codeaudit.ParseRequest\x1a\x18.codeaudit.ParseResponse\x12F\n" +
	"\n" +
	"ParseBatch\x12\x1c.codeaudit.BatchParseRequest\x1a\x18.codeaudit.ParseResponse0\x01B\x1e\n" +
	"\x13com.codeaudit.protoZ\a./protob\x06proto3"

var (
	file_ast_parser_proto_rawDescOnce sync.Once
	file_ast_parser_proto_rawDescData []byte
)

func file_ast_parser_proto_rawDescGZIP() []byte {
	file_ast_parser_proto_rawDescOnce.Do(func() {
		file_ast_parser_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ast_parser_proto_rawDesc), len(file_ast_parser_proto_rawDesc)))
	})
	return file_ast_parser_proto_rawDescData
}

var file_ast_parser_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ast_parser_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ast_parser_proto_goTypes = []any{
	(Language)(0),             // 0: codeaudit.Language
	(*ParseRequest)(nil),      // 1: codeaudit.ParseRequest
	(*ParseResponse)(nil),     // 2: codeaudit.ParseResponse
	(*ParseError)(nil),        // 3: codeaudit.ParseError
	(*ParseMetadata)(nil),     // 4: codeaudit.ParseMetadata
	(*BatchParseRequest)(nil), // 5: codeaudit.BatchParseRequest
	(*ASTNode)(nil),           // 6: codeaudit.ASTNode
	(*KeyValue)(nil),          // 7: codeaudit.KeyValue
}
var file_ast_parser_proto_depIdxs = []int32{
	3, // 0: codeaudit.ParseResponse.errors:type_name -> codeaudit.ParseError
	4, // 1: codeaudit.ParseResponse.metadata:type_name -> codeaudit.ParseMetadata
	1, // 2: codeaudit.BatchParseRequest.requests:type_name -> codeaudit.ParseRequest
	6, // 3: codeaudit.ASTNode.children:type_name -> codeaudit.ASTNode
	7, // 4: codeaudit.ASTNode.attributes:type_name -> codeaudit.KeyValue
	1, // 5: codeaudit.ASTParser.ParseFile:input_type -> codeaudit.ParseRequest
	5, // 6: codeaudit.ASTParser.ParseBatch:input_type -> codeaudit.BatchParseRequest
	2, // 7: codeaudit.ASTParser.ParseFile:output_type -> codeaudit.ParseResponse
	2, // 8: codeaudit.ASTParser.ParseBatch:output_type -> codeaudit.ParseResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_ast_parser_proto_init() }
func file_ast_parser_proto_init() {
	if File_ast_parser_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ast_parser_proto_rawDesc), len(file_ast_parser_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ast_parser_proto_goTypes,
		DependencyIndexes: file_ast_parser_proto_depIdxs,
		EnumInfos:         file_ast_parser_proto_enumTypes,
		MessageInfos:      file_ast_parser_proto_msgTypes,
	}.Build()
	File_ast_parser_proto = out.File
	file_ast_parser_proto_goTypes = nil
	file_ast_parser_proto_depIdxs = nil
}
