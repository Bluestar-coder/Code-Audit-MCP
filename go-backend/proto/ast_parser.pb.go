// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: proto/ast_parser.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 语言信息
type Language int32

const (
	Language_UNKNOWN    Language = 0
	Language_GO         Language = 1
	Language_PYTHON     Language = 2
	Language_JAVA       Language = 3
	Language_JAVASCRIPT Language = 4
	Language_TYPESCRIPT Language = 5
	Language_PHP        Language = 6
	Language_RUBY       Language = 7
	Language_RUST       Language = 8
	Language_CSHARP     Language = 9
	Language_CPP        Language = 10
	Language_C          Language = 11
	Language_SOLIDITY   Language = 12
	Language_VYPER      Language = 13
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "GO",
		2:  "PYTHON",
		3:  "JAVA",
		4:  "JAVASCRIPT",
		5:  "TYPESCRIPT",
		6:  "PHP",
		7:  "RUBY",
		8:  "RUST",
		9:  "CSHARP",
		10: "CPP",
		11: "C",
		12: "SOLIDITY",
		13: "VYPER",
	}
	Language_value = map[string]int32{
		"UNKNOWN":    0,
		"GO":         1,
		"PYTHON":     2,
		"JAVA":       3,
		"JAVASCRIPT": 4,
		"TYPESCRIPT": 5,
		"PHP":        6,
		"RUBY":       7,
		"RUST":       8,
		"CSHARP":     9,
		"CPP":        10,
		"C":          11,
		"SOLIDITY":   12,
		"VYPER":      13,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ast_parser_proto_enumTypes[0].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_proto_ast_parser_proto_enumTypes[0]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{0}
}

// 解析单个文件请求
type ParseRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FilePath        string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`                       // 文件路径
	Language        string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`                                       // 编程语言 (go, python, java, javascript, php, etc.)
	Content         []byte                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                                         // 文件内容（如果为空则从file_path读取）
	IncludeMetadata bool                   `protobuf:"varint,4,opt,name=include_metadata,json=includeMetadata,proto3" json:"include_metadata,omitempty"` // 是否包含元数据
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ParseRequest) Reset() {
	*x = ParseRequest{}
	mi := &file_proto_ast_parser_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseRequest) ProtoMessage() {}

func (x *ParseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseRequest.ProtoReflect.Descriptor instead.
func (*ParseRequest) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{0}
}

func (x *ParseRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ParseRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ParseRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ParseRequest) GetIncludeMetadata() bool {
	if x != nil {
		return x.IncludeMetadata
	}
	return false
}

// 解析响应
type ParseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"` // 文件路径
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`                  // 是否成功解析
	AstData       []byte                 `protobuf:"bytes,3,opt,name=ast_data,json=astData,proto3" json:"ast_data,omitempty"`    // 序列化的AST数据（JSON格式）
	Errors        []*ParseError          `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`                     // 解析错误
	Metadata      *ParseMetadata         `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`                 // 元数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseResponse) Reset() {
	*x = ParseResponse{}
	mi := &file_proto_ast_parser_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseResponse) ProtoMessage() {}

func (x *ParseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseResponse.ProtoReflect.Descriptor instead.
func (*ParseResponse) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{1}
}

func (x *ParseResponse) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ParseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ParseResponse) GetAstData() []byte {
	if x != nil {
		return x.AstData
	}
	return nil
}

func (x *ParseResponse) GetErrors() []*ParseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ParseResponse) GetMetadata() *ParseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 解析错误信息
type ParseError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Line          int32                  `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`                           // 错误行号
	Column        int32                  `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`                       // 错误列号
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                      // 错误消息
	ErrorType     string                 `protobuf:"bytes,4,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"` // 错误类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParseError) Reset() {
	*x = ParseError{}
	mi := &file_proto_ast_parser_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseError) ProtoMessage() {}

func (x *ParseError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseError.ProtoReflect.Descriptor instead.
func (*ParseError) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{2}
}

func (x *ParseError) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *ParseError) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *ParseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ParseError) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

// 元数据
type ParseMetadata struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ParseTimeMs     int64                  `protobuf:"varint,1,opt,name=parse_time_ms,json=parseTimeMs,proto3" json:"parse_time_ms,omitempty"`          // 解析耗时（毫秒）
	TotalLines      int32                  `protobuf:"varint,2,opt,name=total_lines,json=totalLines,proto3" json:"total_lines,omitempty"`               // 总行数
	TotalFunctions  int32                  `protobuf:"varint,3,opt,name=total_functions,json=totalFunctions,proto3" json:"total_functions,omitempty"`   // 函数总数
	TotalClasses    int32                  `protobuf:"varint,4,opt,name=total_classes,json=totalClasses,proto3" json:"total_classes,omitempty"`         // 类总数
	LanguageVersion string                 `protobuf:"bytes,5,opt,name=language_version,json=languageVersion,proto3" json:"language_version,omitempty"` // 语言版本
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ParseMetadata) Reset() {
	*x = ParseMetadata{}
	mi := &file_proto_ast_parser_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseMetadata) ProtoMessage() {}

func (x *ParseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseMetadata.ProtoReflect.Descriptor instead.
func (*ParseMetadata) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{3}
}

func (x *ParseMetadata) GetParseTimeMs() int64 {
	if x != nil {
		return x.ParseTimeMs
	}
	return 0
}

func (x *ParseMetadata) GetTotalLines() int32 {
	if x != nil {
		return x.TotalLines
	}
	return 0
}

func (x *ParseMetadata) GetTotalFunctions() int32 {
	if x != nil {
		return x.TotalFunctions
	}
	return 0
}

func (x *ParseMetadata) GetTotalClasses() int32 {
	if x != nil {
		return x.TotalClasses
	}
	return 0
}

func (x *ParseMetadata) GetLanguageVersion() string {
	if x != nil {
		return x.LanguageVersion
	}
	return ""
}

// 批量解析请求
type BatchParseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requests      []*ParseRequest        `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`                                 // 待解析文件列表
	MaxConcurrent int32                  `protobuf:"varint,2,opt,name=max_concurrent,json=maxConcurrent,proto3" json:"max_concurrent,omitempty"` // 最大并发数（默认4）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchParseRequest) Reset() {
	*x = BatchParseRequest{}
	mi := &file_proto_ast_parser_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchParseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchParseRequest) ProtoMessage() {}

func (x *BatchParseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchParseRequest.ProtoReflect.Descriptor instead.
func (*BatchParseRequest) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{4}
}

func (x *BatchParseRequest) GetRequests() []*ParseRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchParseRequest) GetMaxConcurrent() int32 {
	if x != nil {
		return x.MaxConcurrent
	}
	return 0
}

// AST 节点信息
type ASTNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                       // 节点ID
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                                   // 节点类型 (FunctionDecl, ClassDecl, etc.)
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                   // 节点名称
	StartLine     int32                  `protobuf:"varint,4,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`       // 起始行号
	StartColumn   int32                  `protobuf:"varint,5,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"` // 起始列号
	EndLine       int32                  `protobuf:"varint,6,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`             // 结束行号
	EndColumn     int32                  `protobuf:"varint,7,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`       // 结束列号
	SourceCode    string                 `protobuf:"bytes,8,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty"`     // 源代码片段
	Children      []*ASTNode             `protobuf:"bytes,9,rep,name=children,proto3" json:"children,omitempty"`                           // 子节点
	Attributes    []*KeyValue            `protobuf:"bytes,10,rep,name=attributes,proto3" json:"attributes,omitempty"`                      // 额外属性
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ASTNode) Reset() {
	*x = ASTNode{}
	mi := &file_proto_ast_parser_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ASTNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNode) ProtoMessage() {}

func (x *ASTNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNode.ProtoReflect.Descriptor instead.
func (*ASTNode) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{5}
}

func (x *ASTNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ASTNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ASTNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ASTNode) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *ASTNode) GetStartColumn() int32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *ASTNode) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *ASTNode) GetEndColumn() int32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

func (x *ASTNode) GetSourceCode() string {
	if x != nil {
		return x.SourceCode
	}
	return ""
}

func (x *ASTNode) GetChildren() []*ASTNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *ASTNode) GetAttributes() []*KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// 键值对
type KeyValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	mi := &file_proto_ast_parser_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{6}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// 扫描文件请求
type ScanFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"` // 文件路径
	Language      string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`                 // 编程语言
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                   // 文件内容
	RuleIds       []string               `protobuf:"bytes,4,rep,name=rule_ids,json=ruleIds,proto3" json:"rule_ids,omitempty"`    // 指定要使用的规则ID（为空则使用所有规则）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScanFileRequest) Reset() {
	*x = ScanFileRequest{}
	mi := &file_proto_ast_parser_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanFileRequest) ProtoMessage() {}

func (x *ScanFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanFileRequest.ProtoReflect.Descriptor instead.
func (*ScanFileRequest) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{7}
}

func (x *ScanFileRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ScanFileRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ScanFileRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ScanFileRequest) GetRuleIds() []string {
	if x != nil {
		return x.RuleIds
	}
	return nil
}

// 扫描文件响应
type ScanFileResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Success       bool                    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                  // 是否成功
	FilePath      string                  `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"` // 文件路径
	Language      string                  `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`                 // 检测到的语言
	Findings      []*VulnerabilityFinding `protobuf:"bytes,4,rep,name=findings,proto3" json:"findings,omitempty"`                 // 发现的漏洞
	Statistics    string                  `protobuf:"bytes,5,opt,name=statistics,proto3" json:"statistics,omitempty"`             // 统计信息（JSON格式）
	Error         string                  `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`                       // 错误信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScanFileResponse) Reset() {
	*x = ScanFileResponse{}
	mi := &file_proto_ast_parser_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanFileResponse) ProtoMessage() {}

func (x *ScanFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanFileResponse.ProtoReflect.Descriptor instead.
func (*ScanFileResponse) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{8}
}

func (x *ScanFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ScanFileResponse) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ScanFileResponse) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ScanFileResponse) GetFindings() []*VulnerabilityFinding {
	if x != nil {
		return x.Findings
	}
	return nil
}

func (x *ScanFileResponse) GetStatistics() string {
	if x != nil {
		return x.Statistics
	}
	return ""
}

func (x *ScanFileResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// 批量扫描请求
type ScanBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Files         []*ScanFileRequest     `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`                    // 待扫描文件列表
	RuleIds       []string               `protobuf:"bytes,2,rep,name=rule_ids,json=ruleIds,proto3" json:"rule_ids,omitempty"` // 指定要使用的规则ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScanBatchRequest) Reset() {
	*x = ScanBatchRequest{}
	mi := &file_proto_ast_parser_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanBatchRequest) ProtoMessage() {}

func (x *ScanBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanBatchRequest.ProtoReflect.Descriptor instead.
func (*ScanBatchRequest) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{9}
}

func (x *ScanBatchRequest) GetFiles() []*ScanFileRequest {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ScanBatchRequest) GetRuleIds() []string {
	if x != nil {
		return x.RuleIds
	}
	return nil
}

// 批量扫描响应
type ScanBatchResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Results           []*ScanFileResponse    `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`                                              // 扫描结果
	OverallStatistics string                 `protobuf:"bytes,2,opt,name=overall_statistics,json=overallStatistics,proto3" json:"overall_statistics,omitempty"` // 总体统计信息（JSON格式）
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ScanBatchResponse) Reset() {
	*x = ScanBatchResponse{}
	mi := &file_proto_ast_parser_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanBatchResponse) ProtoMessage() {}

func (x *ScanBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanBatchResponse.ProtoReflect.Descriptor instead.
func (*ScanBatchResponse) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{10}
}

func (x *ScanBatchResponse) GetResults() []*ScanFileResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ScanBatchResponse) GetOverallStatistics() string {
	if x != nil {
		return x.OverallStatistics
	}
	return ""
}

// 漏洞发现
type VulnerabilityFinding struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RuleId        string                 `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`       // 规则ID
	RuleName      string                 `protobuf:"bytes,2,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"` // 规则名称
	Category      string                 `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`                 // 漏洞类别
	Severity      string                 `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty"`                 // 严重程度
	Message       string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`                   // 描述信息
	FilePath      string                 `protobuf:"bytes,6,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"` // 文件路径
	Line          int32                  `protobuf:"varint,7,opt,name=line,proto3" json:"line,omitempty"`                        // 行号
	Column        int32                  `protobuf:"varint,8,opt,name=column,proto3" json:"column,omitempty"`                    // 列号
	Code          string                 `protobuf:"bytes,9,opt,name=code,proto3" json:"code,omitempty"`                         // 相关代码
	Language      string                 `protobuf:"bytes,10,opt,name=language,proto3" json:"language,omitempty"`                // 编程语言
	Metadata      string                 `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`                // 元数据（JSON格式）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VulnerabilityFinding) Reset() {
	*x = VulnerabilityFinding{}
	mi := &file_proto_ast_parser_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VulnerabilityFinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityFinding) ProtoMessage() {}

func (x *VulnerabilityFinding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityFinding.ProtoReflect.Descriptor instead.
func (*VulnerabilityFinding) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{11}
}

func (x *VulnerabilityFinding) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *VulnerabilityFinding) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *VulnerabilityFinding) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *VulnerabilityFinding) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *VulnerabilityFinding) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VulnerabilityFinding) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *VulnerabilityFinding) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *VulnerabilityFinding) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *VulnerabilityFinding) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VulnerabilityFinding) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *VulnerabilityFinding) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

// 获取规则请求
type GetRulesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      string                 `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"` // 按语言过滤（可选）
	Category      string                 `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"` // 按类别过滤（可选）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRulesRequest) Reset() {
	*x = GetRulesRequest{}
	mi := &file_proto_ast_parser_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRulesRequest) ProtoMessage() {}

func (x *GetRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRulesRequest.ProtoReflect.Descriptor instead.
func (*GetRulesRequest) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{12}
}

func (x *GetRulesRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *GetRulesRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

// 获取规则响应
type GetRulesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rules         []*VulnerabilityRule   `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"` // 规则列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRulesResponse) Reset() {
	*x = GetRulesResponse{}
	mi := &file_proto_ast_parser_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRulesResponse) ProtoMessage() {}

func (x *GetRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRulesResponse.ProtoReflect.Descriptor instead.
func (*GetRulesResponse) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{13}
}

func (x *GetRulesResponse) GetRules() []*VulnerabilityRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// 根据ID获取规则请求
type GetRuleByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RuleId        string                 `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"` // 规则ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRuleByIdRequest) Reset() {
	*x = GetRuleByIdRequest{}
	mi := &file_proto_ast_parser_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRuleByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleByIdRequest) ProtoMessage() {}

func (x *GetRuleByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleByIdRequest.ProtoReflect.Descriptor instead.
func (*GetRuleByIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{14}
}

func (x *GetRuleByIdRequest) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

// 根据ID获取规则响应
type GetRuleByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Found         bool                   `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"` // 是否找到
	Rule          *VulnerabilityRule     `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`    // 规则信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRuleByIdResponse) Reset() {
	*x = GetRuleByIdResponse{}
	mi := &file_proto_ast_parser_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRuleByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleByIdResponse) ProtoMessage() {}

func (x *GetRuleByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleByIdResponse.ProtoReflect.Descriptor instead.
func (*GetRuleByIdResponse) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{15}
}

func (x *GetRuleByIdResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *GetRuleByIdResponse) GetRule() *VulnerabilityRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

// 漏洞检测规则
type VulnerabilityRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                     // 规则名称
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                                         // 规则ID
	Category      string                 `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`                             // 类别
	Severity      string                 `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty"`                             // 严重程度
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                       // 描述
	Language      []string               `protobuf:"bytes,6,rep,name=language,proto3" json:"language,omitempty"`                             // 适用语言
	Patterns      []*RulePattern         `protobuf:"bytes,7,rep,name=patterns,proto3" json:"patterns,omitempty"`                             // 检测模式
	SafePatterns  []*RulePattern         `protobuf:"bytes,8,rep,name=safe_patterns,json=safePatterns,proto3" json:"safe_patterns,omitempty"` // 安全模式
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VulnerabilityRule) Reset() {
	*x = VulnerabilityRule{}
	mi := &file_proto_ast_parser_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VulnerabilityRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityRule) ProtoMessage() {}

func (x *VulnerabilityRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityRule.ProtoReflect.Descriptor instead.
func (*VulnerabilityRule) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{16}
}

func (x *VulnerabilityRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VulnerabilityRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VulnerabilityRule) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *VulnerabilityRule) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *VulnerabilityRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VulnerabilityRule) GetLanguage() []string {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *VulnerabilityRule) GetPatterns() []*RulePattern {
	if x != nil {
		return x.Patterns
	}
	return nil
}

func (x *VulnerabilityRule) GetSafePatterns() []*RulePattern {
	if x != nil {
		return x.SafePatterns
	}
	return nil
}

// 规则模式
type RulePattern struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pattern       string                 `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`   // 正则表达式模式
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`   // 匹配时的消息
	Severity      string                 `protobuf:"bytes,3,opt,name=severity,proto3" json:"severity,omitempty"` // 严重程度
	Language      []string               `protobuf:"bytes,4,rep,name=language,proto3" json:"language,omitempty"` // 适用语言
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RulePattern) Reset() {
	*x = RulePattern{}
	mi := &file_proto_ast_parser_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RulePattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RulePattern) ProtoMessage() {}

func (x *RulePattern) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ast_parser_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RulePattern.ProtoReflect.Descriptor instead.
func (*RulePattern) Descriptor() ([]byte, []int) {
	return file_proto_ast_parser_proto_rawDescGZIP(), []int{17}
}

func (x *RulePattern) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *RulePattern) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RulePattern) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *RulePattern) GetLanguage() []string {
	if x != nil {
		return x.Language
	}
	return nil
}

var File_proto_ast_parser_proto protoreflect.FileDescriptor

const file_proto_ast_parser_proto_rawDesc = "" +
	"\n" +
	"\x16proto/ast_parser.proto\x12\tcodeaudit\"\x8c\x01\n" +
	"\fParseRequest\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12\x18\n" +
	"\acontent\x18\x03 \x01(\fR\acontent\x12)\n" +
	"\x10include_metadata\x18\x04 \x01(\bR\x0fincludeMetadata\"\xc6\x01\n" +
	"\rParseResponse\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x19\n" +
	"\bast_data\x18\x03 \x01(\fR\aastData\x12-\n" +
	"\x06errors\x18\x04 \x03(\v2\x15.codeaudit.ParseErrorR\x06errors\x124\n" +
	"\bmetadata\x18\x05 \x01(\v2\x18.codeaudit.ParseMetadataR\bmetadata\"q\n" +
	"\n" +
	"ParseError\x12\x12\n" +
	"\x04line\x18\x01 \x01(\x05R\x04line\x12\x16\n" +
	"\x06column\x18\x02 \x01(\x05R\x06column\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"error_type\x18\x04 \x01(\tR\terrorType\"\xcd\x01\n" +
	"\rParseMetadata\x12\"\n" +
	"\rparse_time_ms\x18\x01 \x01(\x03R\vparseTimeMs\x12\x1f\n" +
	"\vtotal_lines\x18\x02 \x01(\x05R\n" +
	"totalLines\x12'\n" +
	"\x0ftotal_functions\x18\x03 \x01(\x05R\x0etotalFunctions\x12#\n" +
	"\rtotal_classes\x18\x04 \x01(\x05R\ftotalClasses\x12)\n" +
	"\x10language_version\x18\x05 \x01(\tR\x0flanguageVersion\"o\n" +
	"\x11BatchParseRequest\x123\n" +
	"\brequests\x18\x01 \x03(\v2\x17.codeaudit.ParseRequestR\brequests\x12%\n" +
	"\x0emax_concurrent\x18\x02 \x01(\x05R\rmaxConcurrent\"\xc3\x02\n" +
	"\aASTNode\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"start_line\x18\x04 \x01(\x05R\tstartLine\x12!\n" +
	"\fstart_column\x18\x05 \x01(\x05R\vstartColumn\x12\x19\n" +
	"\bend_line\x18\x06 \x01(\x05R\aendLine\x12\x1d\n" +
	"\n" +
	"end_column\x18\a \x01(\x05R\tendColumn\x12\x1f\n" +
	"\vsource_code\x18\b \x01(\tR\n" +
	"sourceCode\x12.\n" +
	"\bchildren\x18\t \x03(\v2\x12.codeaudit.ASTNodeR\bchildren\x123\n" +
	"\n" +
	"attributes\x18\n" +
	" \x03(\v2\x13.codeaudit.KeyValueR\n" +
	"attributes\"2\n" +
	"\bKeyValue\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\x7f\n" +
	"\x0fScanFileRequest\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12\x19\n" +
	"\brule_ids\x18\x04 \x03(\tR\aruleIds\"\xd8\x01\n" +
	"\x10ScanFileResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x1b\n" +
	"\tfile_path\x18\x02 \x01(\tR\bfilePath\x12\x1a\n" +
	"\blanguage\x18\x03 \x01(\tR\blanguage\x12;\n" +
	"\bfindings\x18\x04 \x03(\v2\x1f.codeaudit.VulnerabilityFindingR\bfindings\x12\x1e\n" +
	"\n" +
	"statistics\x18\x05 \x01(\tR\n" +
	"statistics\x12\x14\n" +
	"\x05error\x18\x06 \x01(\tR\x05error\"_\n" +
	"\x10ScanBatchRequest\x120\n" +
	"\x05files\x18\x01 \x03(\v2\x1a.codeaudit.ScanFileRequestR\x05files\x12\x19\n" +
	"\brule_ids\x18\x02 \x03(\tR\aruleIds\"y\n" +
	"\x11ScanBatchResponse\x125\n" +
	"\aresults\x18\x01 \x03(\v2\x1b.codeaudit.ScanFileResponseR\aresults\x12-\n" +
	"\x12overall_statistics\x18\x02 \x01(\tR\x11overallStatistics\"\xb3\x02\n" +
	"\x14VulnerabilityFinding\x12\x17\n" +
	"\arule_id\x18\x01 \x01(\tR\x06ruleId\x12\x1b\n" +
	"\trule_name\x18\x02 \x01(\tR\bruleName\x12\x1a\n" +
	"\bcategory\x18\x03 \x01(\tR\bcategory\x12\x1a\n" +
	"\bseverity\x18\x04 \x01(\tR\bseverity\x12\x18\n" +
	"\amessage\x18\x05 \x01(\tR\amessage\x12\x1b\n" +
	"\tfile_path\x18\x06 \x01(\tR\bfilePath\x12\x12\n" +
	"\x04line\x18\a \x01(\x05R\x04line\x12\x16\n" +
	"\x06column\x18\b \x01(\x05R\x06column\x12\x12\n" +
	"\x04code\x18\t \x01(\tR\x04code\x12\x1a\n" +
	"\blanguage\x18\n" +
	" \x01(\tR\blanguage\x12\x1a\n" +
	"\bmetadata\x18\v \x01(\tR\bmetadata\"I\n" +
	"\x0fGetRulesRequest\x12\x1a\n" +
	"\blanguage\x18\x01 \x01(\tR\blanguage\x12\x1a\n" +
	"\bcategory\x18\x02 \x01(\tR\bcategory\"F\n" +
	"\x10GetRulesResponse\x122\n" +
	"\x05rules\x18\x01 \x03(\v2\x1c.codeaudit.VulnerabilityRuleR\x05rules\"-\n" +
	"\x12GetRuleByIdRequest\x12\x17\n" +
	"\arule_id\x18\x01 \x01(\tR\x06ruleId\"]\n" +
	"\x13GetRuleByIdResponse\x12\x14\n" +
	"\x05found\x18\x01 \x01(\bR\x05found\x120\n" +
	"\x04rule\x18\x02 \x01(\v2\x1c.codeaudit.VulnerabilityRuleR\x04rule\"\x9e\x02\n" +
	"\x11VulnerabilityRule\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12\x1a\n" +
	"\bcategory\x18\x03 \x01(\tR\bcategory\x12\x1a\n" +
	"\bseverity\x18\x04 \x01(\tR\bseverity\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12\x1a\n" +
	"\blanguage\x18\x06 \x03(\tR\blanguage\x122\n" +
	"\bpatterns\x18\a \x03(\v2\x16.codeaudit.RulePatternR\bpatterns\x12;\n" +
	"\rsafe_patterns\x18\b \x03(\v2\x16.codeaudit.RulePatternR\fsafePatterns\"y\n" +
	"\vRulePattern\x12\x18\n" +
	"\apattern\x18\x01 \x01(\tR\apattern\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1a\n" +
	"\bseverity\x18\x03 \x01(\tR\bseverity\x12\x1a\n" +
	"\blanguage\x18\x04 \x03(\tR\blanguage*\xa7\x01\n" +
	"\bLanguage\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x06\n" +
	"\x02GO\x10\x01\x12\n" +
	"\n" +
	"\x06PYTHON\x10\x02\x12\b\n" +
	"\x04JAVA\x10\x03\x12\x0e\n" +
	"\n" +
	"JAVASCRIPT\x10\x04\x12\x0e\n" +
	"\n" +
	"TYPESCRIPT\x10\x05\x12\a\n" +
	"\x03PHP\x10\x06\x12\b\n" +
	"\x04RUBY\x10\a\x12\b\n" +
	"\x04RUST\x10\b\x12\n" +
	"\n" +
	"\x06CSHARP\x10\t\x12\a\n" +
	"\x03CPP\x10\n" +
	"\x12\x05\n" +
	"\x01C\x10\v\x12\f\n" +
	"\bSOLIDITY\x10\f\x12\t\n" +
	"\x05VYPER\x10\r2\x93\x01\n" +
	"\tASTParser\x12>\n" +
	"\tParseFile\x12\x17.codeaudit.ParseRequest\x1a\x18.codeaudit.ParseResponse\x12F\n" +
	"\n" +
	"ParseBatch\x12\x1c.codeaudit.BatchParseRequest\x1a\x18.codeaudit.ParseResponse0\x012\xb7\x02\n" +
	"\x15VulnerabilityDetector\x12C\n" +
	"\bScanFile\x12\x1a.codeaudit.ScanFileRequest\x1a\x1b.codeaudit.ScanFileResponse\x12F\n" +
	"\tScanBatch\x12\x1b.codeaudit.ScanBatchRequest\x1a\x1c.codeaudit.ScanBatchResponse\x12C\n" +
	"\bGetRules\x12\x1a.codeaudit.GetRulesRequest\x1a\x1b.codeaudit.GetRulesResponse\x12L\n" +
	"\vGetRuleById\x12\x1d.codeaudit.GetRuleByIdRequest\x1a\x1e.codeaudit.GetRuleByIdResponseB\x1e\n" +
	"\x13com.codeaudit.protoZ\a./protob\x06proto3"

var (
	file_proto_ast_parser_proto_rawDescOnce sync.Once
	file_proto_ast_parser_proto_rawDescData []byte
)

func file_proto_ast_parser_proto_rawDescGZIP() []byte {
	file_proto_ast_parser_proto_rawDescOnce.Do(func() {
		file_proto_ast_parser_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_ast_parser_proto_rawDesc), len(file_proto_ast_parser_proto_rawDesc)))
	})
	return file_proto_ast_parser_proto_rawDescData
}

var file_proto_ast_parser_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_ast_parser_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_proto_ast_parser_proto_goTypes = []any{
	(Language)(0),                // 0: codeaudit.Language
	(*ParseRequest)(nil),         // 1: codeaudit.ParseRequest
	(*ParseResponse)(nil),        // 2: codeaudit.ParseResponse
	(*ParseError)(nil),           // 3: codeaudit.ParseError
	(*ParseMetadata)(nil),        // 4: codeaudit.ParseMetadata
	(*BatchParseRequest)(nil),    // 5: codeaudit.BatchParseRequest
	(*ASTNode)(nil),              // 6: codeaudit.ASTNode
	(*KeyValue)(nil),             // 7: codeaudit.KeyValue
	(*ScanFileRequest)(nil),      // 8: codeaudit.ScanFileRequest
	(*ScanFileResponse)(nil),     // 9: codeaudit.ScanFileResponse
	(*ScanBatchRequest)(nil),     // 10: codeaudit.ScanBatchRequest
	(*ScanBatchResponse)(nil),    // 11: codeaudit.ScanBatchResponse
	(*VulnerabilityFinding)(nil), // 12: codeaudit.VulnerabilityFinding
	(*GetRulesRequest)(nil),      // 13: codeaudit.GetRulesRequest
	(*GetRulesResponse)(nil),     // 14: codeaudit.GetRulesResponse
	(*GetRuleByIdRequest)(nil),   // 15: codeaudit.GetRuleByIdRequest
	(*GetRuleByIdResponse)(nil),  // 16: codeaudit.GetRuleByIdResponse
	(*VulnerabilityRule)(nil),    // 17: codeaudit.VulnerabilityRule
	(*RulePattern)(nil),          // 18: codeaudit.RulePattern
}
var file_proto_ast_parser_proto_depIdxs = []int32{
	3,  // 0: codeaudit.ParseResponse.errors:type_name -> codeaudit.ParseError
	4,  // 1: codeaudit.ParseResponse.metadata:type_name -> codeaudit.ParseMetadata
	1,  // 2: codeaudit.BatchParseRequest.requests:type_name -> codeaudit.ParseRequest
	6,  // 3: codeaudit.ASTNode.children:type_name -> codeaudit.ASTNode
	7,  // 4: codeaudit.ASTNode.attributes:type_name -> codeaudit.KeyValue
	12, // 5: codeaudit.ScanFileResponse.findings:type_name -> codeaudit.VulnerabilityFinding
	8,  // 6: codeaudit.ScanBatchRequest.files:type_name -> codeaudit.ScanFileRequest
	9,  // 7: codeaudit.ScanBatchResponse.results:type_name -> codeaudit.ScanFileResponse
	17, // 8: codeaudit.GetRulesResponse.rules:type_name -> codeaudit.VulnerabilityRule
	17, // 9: codeaudit.GetRuleByIdResponse.rule:type_name -> codeaudit.VulnerabilityRule
	18, // 10: codeaudit.VulnerabilityRule.patterns:type_name -> codeaudit.RulePattern
	18, // 11: codeaudit.VulnerabilityRule.safe_patterns:type_name -> codeaudit.RulePattern
	1,  // 12: codeaudit.ASTParser.ParseFile:input_type -> codeaudit.ParseRequest
	5,  // 13: codeaudit.ASTParser.ParseBatch:input_type -> codeaudit.BatchParseRequest
	8,  // 14: codeaudit.VulnerabilityDetector.ScanFile:input_type -> codeaudit.ScanFileRequest
	10, // 15: codeaudit.VulnerabilityDetector.ScanBatch:input_type -> codeaudit.ScanBatchRequest
	13, // 16: codeaudit.VulnerabilityDetector.GetRules:input_type -> codeaudit.GetRulesRequest
	15, // 17: codeaudit.VulnerabilityDetector.GetRuleById:input_type -> codeaudit.GetRuleByIdRequest
	2,  // 18: codeaudit.ASTParser.ParseFile:output_type -> codeaudit.ParseResponse
	2,  // 19: codeaudit.ASTParser.ParseBatch:output_type -> codeaudit.ParseResponse
	9,  // 20: codeaudit.VulnerabilityDetector.ScanFile:output_type -> codeaudit.ScanFileResponse
	11, // 21: codeaudit.VulnerabilityDetector.ScanBatch:output_type -> codeaudit.ScanBatchResponse
	14, // 22: codeaudit.VulnerabilityDetector.GetRules:output_type -> codeaudit.GetRulesResponse
	16, // 23: codeaudit.VulnerabilityDetector.GetRuleById:output_type -> codeaudit.GetRuleByIdResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_ast_parser_proto_init() }
func file_proto_ast_parser_proto_init() {
	if File_proto_ast_parser_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_ast_parser_proto_rawDesc), len(file_proto_ast_parser_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_ast_parser_proto_goTypes,
		DependencyIndexes: file_proto_ast_parser_proto_depIdxs,
		EnumInfos:         file_proto_ast_parser_proto_enumTypes,
		MessageInfos:      file_proto_ast_parser_proto_msgTypes,
	}.Build()
	File_proto_ast_parser_proto = out.File
	file_proto_ast_parser_proto_goTypes = nil
	file_proto_ast_parser_proto_depIdxs = nil
}
