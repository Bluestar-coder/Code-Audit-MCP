# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import indexer_pb2 as indexer__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in indexer_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class IndexerStub(object):
    """代码索引服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BuildIndex = channel.unary_unary(
                '/codeaudit.Indexer/BuildIndex',
                request_serializer=indexer__pb2.BuildIndexRequest.SerializeToString,
                response_deserializer=indexer__pb2.BuildIndexResponse.FromString,
                _registered_method=True)
        self.QueryFunction = channel.unary_unary(
                '/codeaudit.Indexer/QueryFunction',
                request_serializer=indexer__pb2.QueryFunctionRequest.SerializeToString,
                response_deserializer=indexer__pb2.QueryFunctionResponse.FromString,
                _registered_method=True)
        self.QueryClass = channel.unary_unary(
                '/codeaudit.Indexer/QueryClass',
                request_serializer=indexer__pb2.QueryClassRequest.SerializeToString,
                response_deserializer=indexer__pb2.QueryClassResponse.FromString,
                _registered_method=True)
        self.QueryCallers = channel.unary_unary(
                '/codeaudit.Indexer/QueryCallers',
                request_serializer=indexer__pb2.QueryCallersRequest.SerializeToString,
                response_deserializer=indexer__pb2.QueryCallersResponse.FromString,
                _registered_method=True)
        self.QueryCallees = channel.unary_unary(
                '/codeaudit.Indexer/QueryCallees',
                request_serializer=indexer__pb2.QueryCalleesRequest.SerializeToString,
                response_deserializer=indexer__pb2.QueryCalleesResponse.FromString,
                _registered_method=True)
        self.SearchSymbol = channel.unary_stream(
                '/codeaudit.Indexer/SearchSymbol',
                request_serializer=indexer__pb2.SearchSymbolRequest.SerializeToString,
                response_deserializer=indexer__pb2.SearchSymbolResponse.FromString,
                _registered_method=True)


class IndexerServicer(object):
    """代码索引服务
    """

    def BuildIndex(self, request, context):
        """构建索引
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryFunction(self, request, context):
        """查询函数
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryClass(self, request, context):
        """查询类
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryCallers(self, request, context):
        """查询调用者
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryCallees(self, request, context):
        """查询被调用者
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchSymbol(self, request, context):
        """搜索符号
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IndexerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BuildIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.BuildIndex,
                    request_deserializer=indexer__pb2.BuildIndexRequest.FromString,
                    response_serializer=indexer__pb2.BuildIndexResponse.SerializeToString,
            ),
            'QueryFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryFunction,
                    request_deserializer=indexer__pb2.QueryFunctionRequest.FromString,
                    response_serializer=indexer__pb2.QueryFunctionResponse.SerializeToString,
            ),
            'QueryClass': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryClass,
                    request_deserializer=indexer__pb2.QueryClassRequest.FromString,
                    response_serializer=indexer__pb2.QueryClassResponse.SerializeToString,
            ),
            'QueryCallers': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryCallers,
                    request_deserializer=indexer__pb2.QueryCallersRequest.FromString,
                    response_serializer=indexer__pb2.QueryCallersResponse.SerializeToString,
            ),
            'QueryCallees': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryCallees,
                    request_deserializer=indexer__pb2.QueryCalleesRequest.FromString,
                    response_serializer=indexer__pb2.QueryCalleesResponse.SerializeToString,
            ),
            'SearchSymbol': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchSymbol,
                    request_deserializer=indexer__pb2.SearchSymbolRequest.FromString,
                    response_serializer=indexer__pb2.SearchSymbolResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'codeaudit.Indexer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('codeaudit.Indexer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Indexer(object):
    """代码索引服务
    """

    @staticmethod
    def BuildIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/codeaudit.Indexer/BuildIndex',
            indexer__pb2.BuildIndexRequest.SerializeToString,
            indexer__pb2.BuildIndexResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/codeaudit.Indexer/QueryFunction',
            indexer__pb2.QueryFunctionRequest.SerializeToString,
            indexer__pb2.QueryFunctionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/codeaudit.Indexer/QueryClass',
            indexer__pb2.QueryClassRequest.SerializeToString,
            indexer__pb2.QueryClassResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryCallers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/codeaudit.Indexer/QueryCallers',
            indexer__pb2.QueryCallersRequest.SerializeToString,
            indexer__pb2.QueryCallersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryCallees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/codeaudit.Indexer/QueryCallees',
            indexer__pb2.QueryCalleesRequest.SerializeToString,
            indexer__pb2.QueryCalleesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchSymbol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/codeaudit.Indexer/SearchSymbol',
            indexer__pb2.SearchSymbolRequest.SerializeToString,
            indexer__pb2.SearchSymbolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
