// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: indexer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Indexer_BuildIndex_FullMethodName    = "/codeaudit.Indexer/BuildIndex"
	Indexer_QueryFunction_FullMethodName = "/codeaudit.Indexer/QueryFunction"
	Indexer_QueryClass_FullMethodName    = "/codeaudit.Indexer/QueryClass"
	Indexer_QueryCallers_FullMethodName  = "/codeaudit.Indexer/QueryCallers"
	Indexer_QueryCallees_FullMethodName  = "/codeaudit.Indexer/QueryCallees"
	Indexer_SearchSymbol_FullMethodName  = "/codeaudit.Indexer/SearchSymbol"
)

// IndexerClient is the client API for Indexer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 代码索引服务
type IndexerClient interface {
	// 构建索引
	BuildIndex(ctx context.Context, in *BuildIndexRequest, opts ...grpc.CallOption) (*BuildIndexResponse, error)
	// 查询函数
	QueryFunction(ctx context.Context, in *QueryFunctionRequest, opts ...grpc.CallOption) (*QueryFunctionResponse, error)
	// 查询类
	QueryClass(ctx context.Context, in *QueryClassRequest, opts ...grpc.CallOption) (*QueryClassResponse, error)
	// 查询调用者
	QueryCallers(ctx context.Context, in *QueryCallersRequest, opts ...grpc.CallOption) (*QueryCallersResponse, error)
	// 查询被调用者
	QueryCallees(ctx context.Context, in *QueryCalleesRequest, opts ...grpc.CallOption) (*QueryCalleesResponse, error)
	// 搜索符号
	SearchSymbol(ctx context.Context, in *SearchSymbolRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchSymbolResponse], error)
}

type indexerClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexerClient(cc grpc.ClientConnInterface) IndexerClient {
	return &indexerClient{cc}
}

func (c *indexerClient) BuildIndex(ctx context.Context, in *BuildIndexRequest, opts ...grpc.CallOption) (*BuildIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildIndexResponse)
	err := c.cc.Invoke(ctx, Indexer_BuildIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) QueryFunction(ctx context.Context, in *QueryFunctionRequest, opts ...grpc.CallOption) (*QueryFunctionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFunctionResponse)
	err := c.cc.Invoke(ctx, Indexer_QueryFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) QueryClass(ctx context.Context, in *QueryClassRequest, opts ...grpc.CallOption) (*QueryClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryClassResponse)
	err := c.cc.Invoke(ctx, Indexer_QueryClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) QueryCallers(ctx context.Context, in *QueryCallersRequest, opts ...grpc.CallOption) (*QueryCallersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCallersResponse)
	err := c.cc.Invoke(ctx, Indexer_QueryCallers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) QueryCallees(ctx context.Context, in *QueryCalleesRequest, opts ...grpc.CallOption) (*QueryCalleesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCalleesResponse)
	err := c.cc.Invoke(ctx, Indexer_QueryCallees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) SearchSymbol(ctx context.Context, in *SearchSymbolRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SearchSymbolResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Indexer_ServiceDesc.Streams[0], Indexer_SearchSymbol_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchSymbolRequest, SearchSymbolResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Indexer_SearchSymbolClient = grpc.ServerStreamingClient[SearchSymbolResponse]

// IndexerServer is the server API for Indexer service.
// All implementations must embed UnimplementedIndexerServer
// for forward compatibility.
//
// 代码索引服务
type IndexerServer interface {
	// 构建索引
	BuildIndex(context.Context, *BuildIndexRequest) (*BuildIndexResponse, error)
	// 查询函数
	QueryFunction(context.Context, *QueryFunctionRequest) (*QueryFunctionResponse, error)
	// 查询类
	QueryClass(context.Context, *QueryClassRequest) (*QueryClassResponse, error)
	// 查询调用者
	QueryCallers(context.Context, *QueryCallersRequest) (*QueryCallersResponse, error)
	// 查询被调用者
	QueryCallees(context.Context, *QueryCalleesRequest) (*QueryCalleesResponse, error)
	// 搜索符号
	SearchSymbol(*SearchSymbolRequest, grpc.ServerStreamingServer[SearchSymbolResponse]) error
	mustEmbedUnimplementedIndexerServer()
}

// UnimplementedIndexerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIndexerServer struct{}

func (UnimplementedIndexerServer) BuildIndex(context.Context, *BuildIndexRequest) (*BuildIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildIndex not implemented")
}
func (UnimplementedIndexerServer) QueryFunction(context.Context, *QueryFunctionRequest) (*QueryFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFunction not implemented")
}
func (UnimplementedIndexerServer) QueryClass(context.Context, *QueryClassRequest) (*QueryClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryClass not implemented")
}
func (UnimplementedIndexerServer) QueryCallers(context.Context, *QueryCallersRequest) (*QueryCallersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCallers not implemented")
}
func (UnimplementedIndexerServer) QueryCallees(context.Context, *QueryCalleesRequest) (*QueryCalleesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCallees not implemented")
}
func (UnimplementedIndexerServer) SearchSymbol(*SearchSymbolRequest, grpc.ServerStreamingServer[SearchSymbolResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SearchSymbol not implemented")
}
func (UnimplementedIndexerServer) mustEmbedUnimplementedIndexerServer() {}
func (UnimplementedIndexerServer) testEmbeddedByValue()                 {}

// UnsafeIndexerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexerServer will
// result in compilation errors.
type UnsafeIndexerServer interface {
	mustEmbedUnimplementedIndexerServer()
}

func RegisterIndexerServer(s grpc.ServiceRegistrar, srv IndexerServer) {
	// If the following call pancis, it indicates UnimplementedIndexerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Indexer_ServiceDesc, srv)
}

func _Indexer_BuildIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).BuildIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_BuildIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).BuildIndex(ctx, req.(*BuildIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_QueryFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).QueryFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_QueryFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).QueryFunction(ctx, req.(*QueryFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_QueryClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).QueryClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_QueryClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).QueryClass(ctx, req.(*QueryClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_QueryCallers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCallersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).QueryCallers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_QueryCallers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).QueryCallers(ctx, req.(*QueryCallersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_QueryCallees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCalleesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).QueryCallees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_QueryCallees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).QueryCallees(ctx, req.(*QueryCalleesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_SearchSymbol_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchSymbolRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndexerServer).SearchSymbol(m, &grpc.GenericServerStream[SearchSymbolRequest, SearchSymbolResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Indexer_SearchSymbolServer = grpc.ServerStreamingServer[SearchSymbolResponse]

// Indexer_ServiceDesc is the grpc.ServiceDesc for Indexer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Indexer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codeaudit.Indexer",
	HandlerType: (*IndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildIndex",
			Handler:    _Indexer_BuildIndex_Handler,
		},
		{
			MethodName: "QueryFunction",
			Handler:    _Indexer_QueryFunction_Handler,
		},
		{
			MethodName: "QueryClass",
			Handler:    _Indexer_QueryClass_Handler,
		},
		{
			MethodName: "QueryCallers",
			Handler:    _Indexer_QueryCallers_Handler,
		},
		{
			MethodName: "QueryCallees",
			Handler:    _Indexer_QueryCallees_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchSymbol",
			Handler:       _Indexer_SearchSymbol_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "indexer.proto",
}
