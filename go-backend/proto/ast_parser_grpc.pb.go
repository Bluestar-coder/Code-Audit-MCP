// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: ast_parser.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ASTParser_ParseFile_FullMethodName  = "/codeaudit.ASTParser/ParseFile"
	ASTParser_ParseBatch_FullMethodName = "/codeaudit.ASTParser/ParseBatch"
)

// ASTParserClient is the client API for ASTParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AST 解析服务
type ASTParserClient interface {
	// 解析单个文件
	ParseFile(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error)
	// 批量解析文件
	ParseBatch(ctx context.Context, in *BatchParseRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ParseResponse], error)
}

type aSTParserClient struct {
	cc grpc.ClientConnInterface
}

func NewASTParserClient(cc grpc.ClientConnInterface) ASTParserClient {
	return &aSTParserClient{cc}
}

func (c *aSTParserClient) ParseFile(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseResponse)
	err := c.cc.Invoke(ctx, ASTParser_ParseFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aSTParserClient) ParseBatch(ctx context.Context, in *BatchParseRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ParseResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ASTParser_ServiceDesc.Streams[0], ASTParser_ParseBatch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BatchParseRequest, ParseResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ASTParser_ParseBatchClient = grpc.ServerStreamingClient[ParseResponse]

// ASTParserServer is the server API for ASTParser service.
// All implementations must embed UnimplementedASTParserServer
// for forward compatibility.
//
// AST 解析服务
type ASTParserServer interface {
	// 解析单个文件
	ParseFile(context.Context, *ParseRequest) (*ParseResponse, error)
	// 批量解析文件
	ParseBatch(*BatchParseRequest, grpc.ServerStreamingServer[ParseResponse]) error
	mustEmbedUnimplementedASTParserServer()
}

// UnimplementedASTParserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedASTParserServer struct{}

func (UnimplementedASTParserServer) ParseFile(context.Context, *ParseRequest) (*ParseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseFile not implemented")
}
func (UnimplementedASTParserServer) ParseBatch(*BatchParseRequest, grpc.ServerStreamingServer[ParseResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ParseBatch not implemented")
}
func (UnimplementedASTParserServer) mustEmbedUnimplementedASTParserServer() {}
func (UnimplementedASTParserServer) testEmbeddedByValue()                   {}

// UnsafeASTParserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ASTParserServer will
// result in compilation errors.
type UnsafeASTParserServer interface {
	mustEmbedUnimplementedASTParserServer()
}

func RegisterASTParserServer(s grpc.ServiceRegistrar, srv ASTParserServer) {
	// If the following call pancis, it indicates UnimplementedASTParserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ASTParser_ServiceDesc, srv)
}

func _ASTParser_ParseFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASTParserServer).ParseFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ASTParser_ParseFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASTParserServer).ParseFile(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ASTParser_ParseBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BatchParseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ASTParserServer).ParseBatch(m, &grpc.GenericServerStream[BatchParseRequest, ParseResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ASTParser_ParseBatchServer = grpc.ServerStreamingServer[ParseResponse]

// ASTParser_ServiceDesc is the grpc.ServiceDesc for ASTParser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ASTParser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codeaudit.ASTParser",
	HandlerType: (*ASTParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseFile",
			Handler:    _ASTParser_ParseFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ParseBatch",
			Handler:       _ASTParser_ParseBatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ast_parser.proto",
}
