// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: call_chain.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CallChainAnalyzer_BuildCallGraph_FullMethodName = "/codeaudit.CallChainAnalyzer/BuildCallGraph"
	CallChainAnalyzer_QueryCallPath_FullMethodName  = "/codeaudit.CallChainAnalyzer/QueryCallPath"
	CallChainAnalyzer_QueryCallDepth_FullMethodName = "/codeaudit.CallChainAnalyzer/QueryCallDepth"
	CallChainAnalyzer_AnalyzeCycles_FullMethodName  = "/codeaudit.CallChainAnalyzer/AnalyzeCycles"
	CallChainAnalyzer_FindDeadCode_FullMethodName   = "/codeaudit.CallChainAnalyzer/FindDeadCode"
)

// CallChainAnalyzerClient is the client API for CallChainAnalyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 调用链分析服务
type CallChainAnalyzerClient interface {
	// 构建调用图
	BuildCallGraph(ctx context.Context, in *BuildCallGraphRequest, opts ...grpc.CallOption) (*BuildCallGraphResponse, error)
	// 查询调用路径
	QueryCallPath(ctx context.Context, in *QueryCallPathRequest, opts ...grpc.CallOption) (*QueryCallPathResponse, error)
	// 查询调用深度
	QueryCallDepth(ctx context.Context, in *QueryCallDepthRequest, opts ...grpc.CallOption) (*QueryCallDepthResponse, error)
	// 分析循环调用
	AnalyzeCycles(ctx context.Context, in *AnalyzeCyclesRequest, opts ...grpc.CallOption) (*AnalyzeCyclesResponse, error)
	// 查询死代码
	FindDeadCode(ctx context.Context, in *FindDeadCodeRequest, opts ...grpc.CallOption) (*FindDeadCodeResponse, error)
}

type callChainAnalyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewCallChainAnalyzerClient(cc grpc.ClientConnInterface) CallChainAnalyzerClient {
	return &callChainAnalyzerClient{cc}
}

func (c *callChainAnalyzerClient) BuildCallGraph(ctx context.Context, in *BuildCallGraphRequest, opts ...grpc.CallOption) (*BuildCallGraphResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildCallGraphResponse)
	err := c.cc.Invoke(ctx, CallChainAnalyzer_BuildCallGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callChainAnalyzerClient) QueryCallPath(ctx context.Context, in *QueryCallPathRequest, opts ...grpc.CallOption) (*QueryCallPathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCallPathResponse)
	err := c.cc.Invoke(ctx, CallChainAnalyzer_QueryCallPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callChainAnalyzerClient) QueryCallDepth(ctx context.Context, in *QueryCallDepthRequest, opts ...grpc.CallOption) (*QueryCallDepthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCallDepthResponse)
	err := c.cc.Invoke(ctx, CallChainAnalyzer_QueryCallDepth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callChainAnalyzerClient) AnalyzeCycles(ctx context.Context, in *AnalyzeCyclesRequest, opts ...grpc.CallOption) (*AnalyzeCyclesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeCyclesResponse)
	err := c.cc.Invoke(ctx, CallChainAnalyzer_AnalyzeCycles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callChainAnalyzerClient) FindDeadCode(ctx context.Context, in *FindDeadCodeRequest, opts ...grpc.CallOption) (*FindDeadCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindDeadCodeResponse)
	err := c.cc.Invoke(ctx, CallChainAnalyzer_FindDeadCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallChainAnalyzerServer is the server API for CallChainAnalyzer service.
// All implementations must embed UnimplementedCallChainAnalyzerServer
// for forward compatibility.
//
// 调用链分析服务
type CallChainAnalyzerServer interface {
	// 构建调用图
	BuildCallGraph(context.Context, *BuildCallGraphRequest) (*BuildCallGraphResponse, error)
	// 查询调用路径
	QueryCallPath(context.Context, *QueryCallPathRequest) (*QueryCallPathResponse, error)
	// 查询调用深度
	QueryCallDepth(context.Context, *QueryCallDepthRequest) (*QueryCallDepthResponse, error)
	// 分析循环调用
	AnalyzeCycles(context.Context, *AnalyzeCyclesRequest) (*AnalyzeCyclesResponse, error)
	// 查询死代码
	FindDeadCode(context.Context, *FindDeadCodeRequest) (*FindDeadCodeResponse, error)
	mustEmbedUnimplementedCallChainAnalyzerServer()
}

// UnimplementedCallChainAnalyzerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCallChainAnalyzerServer struct{}

func (UnimplementedCallChainAnalyzerServer) BuildCallGraph(context.Context, *BuildCallGraphRequest) (*BuildCallGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildCallGraph not implemented")
}
func (UnimplementedCallChainAnalyzerServer) QueryCallPath(context.Context, *QueryCallPathRequest) (*QueryCallPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCallPath not implemented")
}
func (UnimplementedCallChainAnalyzerServer) QueryCallDepth(context.Context, *QueryCallDepthRequest) (*QueryCallDepthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCallDepth not implemented")
}
func (UnimplementedCallChainAnalyzerServer) AnalyzeCycles(context.Context, *AnalyzeCyclesRequest) (*AnalyzeCyclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeCycles not implemented")
}
func (UnimplementedCallChainAnalyzerServer) FindDeadCode(context.Context, *FindDeadCodeRequest) (*FindDeadCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDeadCode not implemented")
}
func (UnimplementedCallChainAnalyzerServer) mustEmbedUnimplementedCallChainAnalyzerServer() {}
func (UnimplementedCallChainAnalyzerServer) testEmbeddedByValue()                           {}

// UnsafeCallChainAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallChainAnalyzerServer will
// result in compilation errors.
type UnsafeCallChainAnalyzerServer interface {
	mustEmbedUnimplementedCallChainAnalyzerServer()
}

func RegisterCallChainAnalyzerServer(s grpc.ServiceRegistrar, srv CallChainAnalyzerServer) {
	// If the following call pancis, it indicates UnimplementedCallChainAnalyzerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CallChainAnalyzer_ServiceDesc, srv)
}

func _CallChainAnalyzer_BuildCallGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildCallGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallChainAnalyzerServer).BuildCallGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallChainAnalyzer_BuildCallGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallChainAnalyzerServer).BuildCallGraph(ctx, req.(*BuildCallGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallChainAnalyzer_QueryCallPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCallPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallChainAnalyzerServer).QueryCallPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallChainAnalyzer_QueryCallPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallChainAnalyzerServer).QueryCallPath(ctx, req.(*QueryCallPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallChainAnalyzer_QueryCallDepth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCallDepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallChainAnalyzerServer).QueryCallDepth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallChainAnalyzer_QueryCallDepth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallChainAnalyzerServer).QueryCallDepth(ctx, req.(*QueryCallDepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallChainAnalyzer_AnalyzeCycles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeCyclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallChainAnalyzerServer).AnalyzeCycles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallChainAnalyzer_AnalyzeCycles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallChainAnalyzerServer).AnalyzeCycles(ctx, req.(*AnalyzeCyclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallChainAnalyzer_FindDeadCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDeadCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallChainAnalyzerServer).FindDeadCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CallChainAnalyzer_FindDeadCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallChainAnalyzerServer).FindDeadCode(ctx, req.(*FindDeadCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CallChainAnalyzer_ServiceDesc is the grpc.ServiceDesc for CallChainAnalyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallChainAnalyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codeaudit.CallChainAnalyzer",
	HandlerType: (*CallChainAnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildCallGraph",
			Handler:    _CallChainAnalyzer_BuildCallGraph_Handler,
		},
		{
			MethodName: "QueryCallPath",
			Handler:    _CallChainAnalyzer_QueryCallPath_Handler,
		},
		{
			MethodName: "QueryCallDepth",
			Handler:    _CallChainAnalyzer_QueryCallDepth_Handler,
		},
		{
			MethodName: "AnalyzeCycles",
			Handler:    _CallChainAnalyzer_AnalyzeCycles_Handler,
		},
		{
			MethodName: "FindDeadCode",
			Handler:    _CallChainAnalyzer_FindDeadCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "call_chain.proto",
}
