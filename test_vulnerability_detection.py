#!/usr/bin/env python3
"""
漏洞检测功能测试脚本
"""

import grpc
import sys
import os
import tempfile

# 添加proto目录到路径
sys.path.append(os.path.join(os.path.dirname(__file__), 'proto'))

import ast_parser_pb2 as pb
import ast_parser_pb2_grpc as pb_grpc

def create_test_files():
    """创建测试用的漏洞代码文件"""
    test_files = {}
    
    # SQL注入漏洞示例
    sql_injection_code = '''
function getUserData(userId) {
    const query = "SELECT * FROM users WHERE id = " + userId;
    return db.query(query);
}

function searchUsers(name) {
    const sql = `SELECT * FROM users WHERE name = '${name}'`;
    return database.execute(sql);
}
'''
    
    # XSS漏洞示例
    xss_code = '''
function displayMessage(userInput) {
    document.getElementById("content").innerHTML = userInput;
}

function renderTemplate(data) {
    return "<div>" + data.message + "</div>";
}
'''
    
    # 路径遍历漏洞示例
    path_traversal_code = '''
const fs = require('fs');

function readFile(filename) {
    const filePath = "./uploads/" + filename;
    return fs.readFileSync(filePath);
}

function downloadFile(path) {
    return fs.createReadStream(path);
}
'''
    
    # 安全代码示例
    safe_code = '''
function getUserData(userId) {
    const query = "SELECT * FROM users WHERE id = ?";
    return db.query(query, [userId]);
}

function displayMessage(userInput) {
    document.getElementById("content").textContent = userInput;
}

function readFile(filename) {
    const safePath = path.resolve("./uploads", filename);
    if (!safePath.startsWith(path.resolve("./uploads"))) {
        throw new Error("Invalid file path");
    }
    return fs.readFileSync(safePath);
}
'''
    
    # 创建临时文件
    with tempfile.NamedTemporaryFile(mode='w', suffix='.js', delete=False) as f:
        f.write(sql_injection_code)
        test_files['sql_injection.js'] = f.name
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.js', delete=False) as f:
        f.write(xss_code)
        test_files['xss.js'] = f.name
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.js', delete=False) as f:
        f.write(path_traversal_code)
        test_files['path_traversal.js'] = f.name
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.js', delete=False) as f:
        f.write(safe_code)
        test_files['safe.js'] = f.name
    
    return test_files

def test_single_file_scan(stub, file_path, file_type):
    """测试单个文件扫描"""
    print(f"\n🔍 扫描文件: {file_type}")
    print(f"   路径: {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        request = pb.ScanFileRequest(
            file_path=file_path,
            content=content,
            language="javascript"
        )
        
        response = stub.ScanFile(request)
        
        print(f"   ✅ 扫描完成")
        print(f"   📊 发现 {len(response.findings)} 个潜在漏洞")
        
        for i, finding in enumerate(response.findings, 1):
            print(f"   🚨 漏洞 {i}:")
            print(f"      类型: {finding.rule_id}")
            print(f"      严重程度: {finding.severity}")
            print(f"      行号: {finding.line}")
            print(f"      描述: {finding.message}")
            print(f"      代码: {finding.code}")
        
        if len(response.findings) == 0:
            print(f"   ✅ 未发现漏洞")
        
        return response
        
    except Exception as e:
        print(f"   ❌ 扫描失败: {e}")
        return None

def test_batch_scan(stub, test_files):
    """测试批量文件扫描"""
    print(f"\n📦 批量扫描测试")
    
    try:
        scan_requests = []
        for file_type, file_path in test_files.items():
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            scan_requests.append(pb.ScanFileRequest(
                file_path=file_path,
                content=content,
                language="javascript"
            ))
        
        request = pb.ScanBatchRequest(files=scan_requests)
        response = stub.ScanBatch(request)
        
        print(f"   ✅ 批量扫描完成")
        print(f"   📁 扫描了 {len(response.results)} 个文件")
        
        # 统计所有发现的漏洞
        total_findings = 0
        severity_counts = {}
        
        for result in response.results:
            if result.success:
                total_findings += len(result.findings)
                for finding in result.findings:
                    severity = finding.severity
                    severity_counts[severity] = severity_counts.get(severity, 0) + 1
        
        print(f"   📊 总计发现 {total_findings} 个潜在漏洞")
        
        if severity_counts:
            print(f"   📈 按严重程度统计:")
            for severity, count in severity_counts.items():
                print(f"      {severity}: {count} 个")
        
        if response.overall_statistics:
            print(f"   📈 总体统计: {response.overall_statistics}")
        
        return response
        
    except Exception as e:
        print(f"   ❌ 批量扫描失败: {e}")
        return None

def test_get_rules(stub):
    """测试获取规则列表"""
    print(f"\n📋 获取漏洞检测规则")
    
    try:
        request = pb.GetRulesRequest()
        response = stub.GetRules(request)
        
        print(f"   ✅ 获取成功")
        print(f"   📊 共有 {len(response.rules)} 个规则")
        
        for i, rule in enumerate(response.rules, 1):
            print(f"   📝 规则 {i}:")
            print(f"      ID: {rule.id}")
            print(f"      名称: {rule.name}")
            print(f"      类型: {rule.category}")
            print(f"      严重程度: {rule.severity}")
            print(f"      描述: {rule.description}")
            print(f"      支持语言: {', '.join(rule.language)}")
            print(f"      检测模式数量: {len(rule.patterns)}")
        
        return response
        
    except Exception as e:
        print(f"   ❌ 获取规则失败: {e}")
        import traceback
        traceback.print_exc()
        return None

def cleanup_test_files(test_files):
    """清理测试文件"""
    for file_path in test_files.values():
        try:
            os.unlink(file_path)
        except:
            pass

def main():
    print("🔒 代码漏洞检测功能测试")
    print("=" * 50)
    
    # 连接到gRPC服务器
    try:
        channel = grpc.insecure_channel('localhost:50051')
        stub = pb_grpc.VulnerabilityDetectorStub(channel)
        print("✅ 已连接到gRPC服务器")
    except Exception as e:
        print(f"❌ 连接服务器失败: {e}")
        return
    
    # 创建测试文件
    test_files = create_test_files()
    print(f"📁 创建了 {len(test_files)} 个测试文件")
    
    try:
        # 测试获取规则
        test_get_rules(stub)
        
        # 测试单个文件扫描
        for file_type, file_path in test_files.items():
            test_single_file_scan(stub, file_path, file_type)
        
        # 测试批量扫描
        test_batch_scan(stub, test_files)
        
        print(f"\n🎉 所有测试完成!")
        
    finally:
        # 清理测试文件
        cleanup_test_files(test_files)
        print(f"🧹 已清理测试文件")

if __name__ == "__main__":
    main()