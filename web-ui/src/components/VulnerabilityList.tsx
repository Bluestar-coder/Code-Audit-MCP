import React, { useState, useEffect } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Typography,
  Box,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  IconButton,
  Collapse,
  Alert,
  LinearProgress,
  Tabs,
  Tab,
  Card,
  CardContent,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Tooltip,
  Badge,
  Grid,
} from '@mui/material';
import {
  ExpandMore,
  ExpandLess,
  Visibility,
  Refresh,
  Download,
  Code,
  Security,
  BugReport,
  Assignment,
  Timeline,
  CheckCircle,
  Error,
  Warning,
  Info,
  PlayArrow,
  FileCopy,
  Link,
  GitHub,
} from '@mui/icons-material';

interface CodeSnippet {
  file: string;
  startLine: number;
  endLine: number;
  code: string;
  language: string;
}

interface FixSuggestion {
  title: string;
  description: string;
  codeExample?: string;
  difficulty: 'easy' | 'medium' | 'hard';
  estimatedTime: string;
}

interface POCExample {
  title: string;
  description: string;
  code: string;
  language: string;
  severity: string;
  prerequisites: string[];
}

interface Reference {
  title: string;
  url: string;
  type: 'cve' | 'cwe' | 'owasp' | 'blog' | 'documentation';
}

interface Vulnerability {
  id: string;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  type: string;
  file: string;
  line: number;
  description: string;
  recommendation: string;
  status: 'open' | 'fixed' | 'false_positive' | 'in_progress';
  discoveredAt: string;
  codeSnippet?: CodeSnippet;
  fixSuggestions?: FixSuggestion[];
  pocExamples?: POCExample[];
  references?: Reference[];
  cvssScore?: number;
  cweId?: string;
  impact: string;
  exploitability: string;
  confidence: number;
}

const VulnerabilityList: React.FC = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [filteredVulns, setFilteredVulns] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [severityFilter, setSeverityFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  const [selectedVuln, setSelectedVuln] = useState<Vulnerability | null>(null);
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());
  const [dialogTab, setDialogTab] = useState(0);

  useEffect(() => {
    // 模拟数据加载
    setTimeout(() => {
      const mockData: Vulnerability[] = [
        {
          id: '1',
          title: 'SQL注入漏洞',
          severity: 'critical',
          type: 'SQL Injection',
          file: 'src/database/user.go',
          line: 45,
          description: '在用户查询函数中发现SQL注入漏洞，攻击者可能通过恶意输入执行任意SQL命令。',
          recommendation: '使用参数化查询或预编译语句来防止SQL注入攻击。',
          status: 'open',
          discoveredAt: '2024-01-15T10:30:00Z',
          cvssScore: 9.8,
          cweId: 'CWE-89',
          impact: '攻击者可以读取、修改或删除数据库中的敏感数据',
          exploitability: '容易利用，只需构造恶意SQL语句',
          confidence: 95,
          codeSnippet: {
            file: 'src/database/user.go',
            startLine: 42,
            endLine: 48,
            code: `func GetUser(username string) (*User, error) {
    query := "SELECT * FROM users WHERE username = '" + username + "'"
    rows, err := db.Query(query)
    if err != nil {
        return nil, err
    }
    // ... rest of the function
}`,
            language: 'go'
          },
          fixSuggestions: [
            {
              title: '使用参数化查询',
              description: '将SQL查询改为使用占位符和参数绑定',
              codeExample: `func GetUser(username string) (*User, error) {
    query := "SELECT * FROM users WHERE username = ?"
    rows, err := db.Query(query, username)
    if err != nil {
        return nil, err
    }
    // ... rest of the function
}`,
              difficulty: 'easy',
              estimatedTime: '15分钟'
            },
            {
              title: '输入验证',
              description: '添加输入验证和清理机制',
              codeExample: `func validateUsername(username string) error {
    if len(username) == 0 || len(username) > 50 {
        return errors.New("invalid username length")
    }
    if matched, _ := regexp.MatchString("^[a-zA-Z0-9_]+$", username); !matched {
        return errors.New("invalid username format")
    }
    return nil
}`,
              difficulty: 'medium',
              estimatedTime: '30分钟'
            }
          ],
          pocExamples: [
            {
              title: '基础SQL注入测试',
              description: '通过用户名字段注入SQL代码',
              code: `# 测试payload
username = "admin' OR '1'='1"

# 预期结果：绕过身份验证
# 实际执行的SQL：
# SELECT * FROM users WHERE username = 'admin' OR '1'='1'`,
              language: 'sql',
              severity: 'high',
              prerequisites: ['可访问登录接口', '用户名参数未过滤']
            },
            {
              title: '数据提取攻击',
              description: '使用UNION查询提取敏感数据',
              code: `# 测试payload
username = "admin' UNION SELECT password FROM users WHERE username='admin'--"

# 预期结果：获取管理员密码
# 实际执行的SQL：
# SELECT * FROM users WHERE username = 'admin' UNION SELECT password FROM users WHERE username='admin'--'`,
              language: 'sql',
              severity: 'critical',
              prerequisites: ['了解数据库结构', '可访问查询接口']
            }
          ],
          references: [
            {
              title: 'OWASP SQL Injection',
              url: 'https://owasp.org/www-community/attacks/SQL_Injection',
              type: 'owasp'
            },
            {
              title: 'CWE-89: SQL Injection',
              url: 'https://cwe.mitre.org/data/definitions/89.html',
              type: 'cwe'
            }
          ]
        },
        {
          id: '2',
          title: '跨站脚本攻击(XSS)',
          severity: 'high',
          type: 'Cross-Site Scripting',
          file: 'src/handlers/comment.go',
          line: 78,
          description: '用户输入未经适当转义直接输出到HTML页面，可能导致XSS攻击。',
          recommendation: '对所有用户输入进行HTML转义，使用安全的模板引擎。',
          status: 'open',
          discoveredAt: '2024-01-14T14:20:00Z',
          cvssScore: 7.5,
          cweId: 'CWE-79',
          impact: '攻击者可以执行恶意脚本，窃取用户会话或敏感信息',
          exploitability: '中等难度，需要诱导用户访问恶意链接',
          confidence: 88,
          codeSnippet: {
            file: 'src/handlers/comment.go',
            startLine: 75,
            endLine: 82,
            code: `func DisplayComment(w http.ResponseWriter, comment string) {
    html := "<div class='comment'>" + comment + "</div>"
    w.Write([]byte(html))
}`,
            language: 'go'
          },
          fixSuggestions: [
            {
              title: 'HTML转义',
              description: '使用html.EscapeString对用户输入进行转义',
              codeExample: `import "html"

func DisplayComment(w http.ResponseWriter, comment string) {
    escapedComment := html.EscapeString(comment)
    html := "<div class='comment'>" + escapedComment + "</div>"
    w.Write([]byte(html))
}`,
              difficulty: 'easy',
              estimatedTime: '10分钟'
            }
          ],
          pocExamples: [
            {
              title: '基础XSS测试',
              description: '注入JavaScript代码测试XSS漏洞',
              code: `# 测试payload
comment = "<script>alert('XSS')</script>"

# 预期结果：弹出警告框
# 如果成功，说明存在XSS漏洞`,
              language: 'javascript',
              severity: 'medium',
              prerequisites: ['可提交评论', '评论会显示在页面上']
            }
          ],
          references: [
            {
              title: 'OWASP XSS Prevention',
              url: 'https://owasp.org/www-community/xss-filter-evasion-cheatsheet',
              type: 'owasp'
            }
          ]
        },
        // ... 其他漏洞数据
      ];
      setVulnerabilities(mockData);
      setFilteredVulns(mockData);
      setLoading(false);
    }, 1000);
  }, []);

  useEffect(() => {
    let filtered = vulnerabilities;

    if (searchTerm) {
      filtered = filtered.filter(vuln =>
        vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.file.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.type.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (severityFilter !== 'all') {
      filtered = filtered.filter(vuln => vuln.severity === severityFilter);
    }

    if (statusFilter !== 'all') {
      filtered = filtered.filter(vuln => vuln.status === statusFilter);
    }

    setFilteredVulns(filtered);
  }, [searchTerm, severityFilter, statusFilter, vulnerabilities]);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'error';
      case 'high': return 'warning';
      case 'medium': return 'info';
      case 'low': return 'success';
      default: return 'default';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'error';
      case 'fixed': return 'success';
      case 'false_positive': return 'default';
      case 'in_progress': return 'warning';
      default: return 'default';
    }
  };

  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'open': return '未修复';
      case 'fixed': return '已修复';
      case 'false_positive': return '误报';
      case 'in_progress': return '修复中';
      default: return status;
    }
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'success';
      case 'medium': return 'warning';
      case 'hard': return 'error';
      default: return 'default';
    }
  };

  const getReferenceIcon = (type: string) => {
    switch (type) {
      case 'cve': return <Security />;
      case 'cwe': return <BugReport />;
      case 'owasp': return <Assignment />;
      case 'github': return <GitHub />;
      default: return <Link />;
    }
  };

  const toggleRowExpansion = (id: string) => {
    const newExpanded = new Set(expandedRows);
    if (newExpanded.has(id)) {
      newExpanded.delete(id);
    } else {
      newExpanded.add(id);
    }
    setExpandedRows(newExpanded);
  };

  const handleRefresh = () => {
    setLoading(true);
    setTimeout(() => setLoading(false), 1000);
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  if (loading) {
    return (
      <Box sx={{ width: '100%', mt: 2 }}>
        <LinearProgress />
        <Typography variant="h6" sx={{ mt: 2, textAlign: 'center' }}>
          正在加载漏洞数据...
        </Typography>
      </Box>
    );
  }

  return (
    <Box>
      <Typography variant="h4" gutterBottom>
        漏洞列表
      </Typography>

      {/* 过滤器 */}
      <Paper elevation={1} sx={{ p: 2, mb: 3 }}>
        <Box display="flex" gap={2} alignItems="center" flexWrap="wrap">
          <TextField
            label="搜索"
            variant="outlined"
            size="small"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            sx={{ minWidth: 200 }}
          />
          
          <FormControl size="small" sx={{ minWidth: 120 }}>
            <InputLabel>严重程度</InputLabel>
            <Select
              value={severityFilter}
              label="严重程度"
              onChange={(e) => setSeverityFilter(e.target.value)}
            >
              <MenuItem value="all">全部</MenuItem>
              <MenuItem value="critical">严重</MenuItem>
              <MenuItem value="high">高危</MenuItem>
              <MenuItem value="medium">中危</MenuItem>
              <MenuItem value="low">低危</MenuItem>
            </Select>
          </FormControl>

          <FormControl size="small" sx={{ minWidth: 120 }}>
            <InputLabel>状态</InputLabel>
            <Select
              value={statusFilter}
              label="状态"
              onChange={(e) => setStatusFilter(e.target.value)}
            >
              <MenuItem value="all">全部</MenuItem>
              <MenuItem value="open">未修复</MenuItem>
              <MenuItem value="fixed">已修复</MenuItem>
              <MenuItem value="false_positive">误报</MenuItem>
              <MenuItem value="in_progress">修复中</MenuItem>
            </Select>
          </FormControl>

          <Button
            variant="outlined"
            startIcon={<Refresh />}
            onClick={handleRefresh}
          >
            刷新
          </Button>

          <Button
            variant="outlined"
            startIcon={<Download />}
          >
            导出
          </Button>
        </Box>
      </Paper>

      {/* 统计信息 */}
      <Grid container spacing={2} sx={{ mb: 2 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                总漏洞数
              </Typography>
              <Typography variant="h4">
                {filteredVulns.length}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                严重漏洞
              </Typography>
              <Typography variant="h4" color="error">
                {filteredVulns.filter(v => v.severity === 'critical').length}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                未修复
              </Typography>
              <Typography variant="h4" color="warning.main">
                {filteredVulns.filter(v => v.status === 'open').length}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                平均CVSS
              </Typography>
              <Typography variant="h4" color="info.main">
                {(filteredVulns.reduce((sum, v) => sum + (v.cvssScore || 0), 0) / filteredVulns.length).toFixed(1)}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* 漏洞表格 */}
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>展开</TableCell>
              <TableCell>标题</TableCell>
              <TableCell>严重程度</TableCell>
              <TableCell>CVSS</TableCell>
              <TableCell>类型</TableCell>
              <TableCell>文件</TableCell>
              <TableCell>行号</TableCell>
              <TableCell>状态</TableCell>
              <TableCell>置信度</TableCell>
              <TableCell>操作</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filteredVulns.map((vuln) => (
              <React.Fragment key={vuln.id}>
                <TableRow hover>
                  <TableCell>
                    <IconButton
                      size="small"
                      onClick={() => toggleRowExpansion(vuln.id)}
                    >
                      {expandedRows.has(vuln.id) ? <ExpandLess /> : <ExpandMore />}
                    </IconButton>
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2" fontWeight="medium">
                      {vuln.title}
                    </Typography>
                    {vuln.cweId && (
                      <Typography variant="caption" color="textSecondary">
                        {vuln.cweId}
                      </Typography>
                    )}
                  </TableCell>
                  <TableCell>
                    <Chip
                      label={vuln.severity}
                      color={getSeverityColor(vuln.severity) as any}
                      size="small"
                    />
                  </TableCell>
                  <TableCell>
                    <Badge
                      badgeContent={vuln.cvssScore?.toFixed(1)}
                      color={vuln.cvssScore && vuln.cvssScore >= 7 ? 'error' : 'warning'}
                    >
                      <Box sx={{ width: 20, height: 20 }} />
                    </Badge>
                  </TableCell>
                  <TableCell>{vuln.type}</TableCell>
                  <TableCell>
                    <Tooltip title={vuln.file}>
                      <Typography variant="body2" noWrap sx={{ maxWidth: 200 }}>
                        {vuln.file}
                      </Typography>
                    </Tooltip>
                  </TableCell>
                  <TableCell>{vuln.line}</TableCell>
                  <TableCell>
                    <Chip
                      label={getStatusLabel(vuln.status)}
                      color={getStatusColor(vuln.status) as any}
                      size="small"
                    />
                  </TableCell>
                  <TableCell>
                    <Typography variant="body2">
                      {vuln.confidence}%
                    </Typography>
                  </TableCell>
                  <TableCell>
                    <IconButton
                      size="small"
                      onClick={() => setSelectedVuln(vuln)}
                    >
                      <Visibility />
                    </IconButton>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={10}>
                    <Collapse in={expandedRows.has(vuln.id)} timeout="auto" unmountOnExit>
                      <Box sx={{ margin: 1, p: 2, bgcolor: 'grey.50' }}>
                        <Typography variant="h6" gutterBottom>
                          详细信息
                        </Typography>
                        <Typography variant="body2" paragraph>
                          <strong>描述：</strong> {vuln.description}
                        </Typography>
                        <Typography variant="body2" paragraph>
                          <strong>影响：</strong> {vuln.impact}
                        </Typography>
                        <Typography variant="body2" paragraph>
                          <strong>利用难度：</strong> {vuln.exploitability}
                        </Typography>
                        <Typography variant="body2">
                          <strong>发现时间：</strong> {new Date(vuln.discoveredAt).toLocaleString()}
                        </Typography>
                      </Box>
                    </Collapse>
                  </TableCell>
                </TableRow>
              </React.Fragment>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      {/* 详情对话框 */}
      <Dialog
        open={!!selectedVuln}
        onClose={() => setSelectedVuln(null)}
        maxWidth="lg"
        fullWidth
      >
        {selectedVuln && (
          <>
            <DialogTitle>
              <Box display="flex" alignItems="center" gap={2}>
                <Typography variant="h6">{selectedVuln.title}</Typography>
                <Chip
                  label={selectedVuln.severity}
                  color={getSeverityColor(selectedVuln.severity) as any}
                />
                {selectedVuln.cvssScore && (
                  <Chip
                    label={`CVSS: ${selectedVuln.cvssScore}`}
                    variant="outlined"
                  />
                )}
              </Box>
            </DialogTitle>
            <DialogContent>
              <Tabs value={dialogTab} onChange={(_, newValue) => setDialogTab(newValue)}>
                <Tab label="概览" icon={<Info />} />
                <Tab label="代码" icon={<Code />} />
                <Tab label="修复建议" icon={<Assignment />} />
                <Tab label="POC示例" icon={<PlayArrow />} />
                <Tab label="参考资料" icon={<Link />} />
              </Tabs>

              {/* 概览标签页 */}
              {dialogTab === 0 && (
                <Box sx={{ mt: 2 }}>
                  <Typography variant="body1" paragraph>
                    <strong>描述：</strong> {selectedVuln.description}
                  </Typography>
                  <Typography variant="body1" paragraph>
                    <strong>文件：</strong> {selectedVuln.file}:{selectedVuln.line}
                  </Typography>
                  <Typography variant="body1" paragraph>
                    <strong>影响：</strong> {selectedVuln.impact}
                  </Typography>
                  <Typography variant="body1" paragraph>
                    <strong>利用难度：</strong> {selectedVuln.exploitability}
                  </Typography>
                  <Typography variant="body1" paragraph>
                    <strong>置信度：</strong> {selectedVuln.confidence}%
                  </Typography>
                  {selectedVuln.cweId && (
                    <Typography variant="body1" paragraph>
                      <strong>CWE ID：</strong> {selectedVuln.cweId}
                    </Typography>
                  )}
                  <Typography variant="body2" color="textSecondary">
                    发现时间：{new Date(selectedVuln.discoveredAt).toLocaleString()}
                  </Typography>
                </Box>
              )}

              {/* 代码标签页 */}
              {dialogTab === 1 && selectedVuln.codeSnippet && (
                <Box sx={{ mt: 2 }}>
                  <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                    <Typography variant="h6">代码片段</Typography>
                    <Button
                      startIcon={<FileCopy />}
                      onClick={() => copyToClipboard(selectedVuln.codeSnippet!.code)}
                    >
                      复制代码
                    </Button>
                  </Box>
                  <Paper sx={{ p: 2, bgcolor: 'grey.100' }}>
                    <Typography variant="caption" color="textSecondary">
                      {selectedVuln.codeSnippet.file} (行 {selectedVuln.codeSnippet.startLine}-{selectedVuln.codeSnippet.endLine})
                    </Typography>
                    <pre style={{ margin: 0, fontFamily: 'monospace', fontSize: '0.875rem' }}>
                      {selectedVuln.codeSnippet.code}
                    </pre>
                  </Paper>
                </Box>
              )}

              {/* 修复建议标签页 */}
              {dialogTab === 2 && (
                <Box sx={{ mt: 2 }}>
                  <Typography variant="body1" paragraph>
                    <strong>基本建议：</strong> {selectedVuln.recommendation}
                  </Typography>
                  {selectedVuln.fixSuggestions && selectedVuln.fixSuggestions.map((suggestion, index) => (
                    <Accordion key={index}>
                      <AccordionSummary expandIcon={<ExpandMore />}>
                        <Box display="flex" alignItems="center" gap={2}>
                          <Typography variant="h6">{suggestion.title}</Typography>
                          <Chip
                            label={suggestion.difficulty}
                            color={getDifficultyColor(suggestion.difficulty) as any}
                            size="small"
                          />
                          <Chip
                            label={suggestion.estimatedTime}
                            variant="outlined"
                            size="small"
                          />
                        </Box>
                      </AccordionSummary>
                      <AccordionDetails>
                        <Typography variant="body2" paragraph>
                          {suggestion.description}
                        </Typography>
                        {suggestion.codeExample && (
                          <Paper sx={{ p: 2, bgcolor: 'grey.100', mt: 2 }}>
                            <Typography variant="caption" color="textSecondary">
                              修复代码示例：
                            </Typography>
                            <pre style={{ margin: 0, fontFamily: 'monospace', fontSize: '0.875rem' }}>
                              {suggestion.codeExample}
                            </pre>
                          </Paper>
                        )}
                      </AccordionDetails>
                    </Accordion>
                  ))}
                </Box>
              )}

              {/* POC示例标签页 */}
              {dialogTab === 3 && (
                <Box sx={{ mt: 2 }}>
                  {selectedVuln.pocExamples ? selectedVuln.pocExamples.map((poc, index) => (
                    <Accordion key={index}>
                      <AccordionSummary expandIcon={<ExpandMore />}>
                        <Box display="flex" alignItems="center" gap={2}>
                          <Typography variant="h6">{poc.title}</Typography>
                          <Chip
                            label={poc.severity}
                            color={getSeverityColor(poc.severity) as any}
                            size="small"
                          />
                        </Box>
                      </AccordionSummary>
                      <AccordionDetails>
                        <Typography variant="body2" paragraph>
                          {poc.description}
                        </Typography>
                        <Typography variant="subtitle2" gutterBottom>
                          前置条件：
                        </Typography>
                        <List dense>
                          {poc.prerequisites.map((prereq, i) => (
                            <ListItem key={i}>
                              <ListItemIcon>
                                <CheckCircle fontSize="small" />
                              </ListItemIcon>
                              <ListItemText primary={prereq} />
                            </ListItem>
                          ))}
                        </List>
                        <Paper sx={{ p: 2, bgcolor: 'grey.100', mt: 2 }}>
                          <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                            <Typography variant="caption" color="textSecondary">
                              POC代码 ({poc.language})：
                            </Typography>
                            <Button
                              size="small"
                              startIcon={<FileCopy />}
                              onClick={() => copyToClipboard(poc.code)}
                            >
                              复制
                            </Button>
                          </Box>
                          <pre style={{ margin: 0, fontFamily: 'monospace', fontSize: '0.875rem' }}>
                            {poc.code}
                          </pre>
                        </Paper>
                      </AccordionDetails>
                    </Accordion>
                  )) : (
                    <Typography variant="body2" color="textSecondary">
                      暂无POC示例
                    </Typography>
                  )}
                </Box>
              )}

              {/* 参考资料标签页 */}
              {dialogTab === 4 && (
                <Box sx={{ mt: 2 }}>
                  {selectedVuln.references ? (
                    <List>
                      {selectedVuln.references.map((ref, index) => (
                        <ListItem key={index} button component="a" href={ref.url} target="_blank">
                          <ListItemIcon>
                            {getReferenceIcon(ref.type)}
                          </ListItemIcon>
                          <ListItemText
                            primary={ref.title}
                            secondary={ref.url}
                          />
                        </ListItem>
                      ))}
                    </List>
                  ) : (
                    <Typography variant="body2" color="textSecondary">
                      暂无参考资料
                    </Typography>
                  )}
                </Box>
              )}
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setSelectedVuln(null)}>关闭</Button>
              <Button variant="contained" startIcon={<Assignment />}>
                生成修复报告
              </Button>
            </DialogActions>
          </>
        )}
      </Dialog>
    </Box>
  );
};

export default VulnerabilityList;