import React, { useState, useEffect } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Typography,
  Box,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  IconButton,
  Collapse,
  Alert,
  LinearProgress,
} from '@mui/material';
import {
  ExpandMore,
  ExpandLess,
  Visibility,
  Refresh,
  Download,
} from '@mui/icons-material';

interface Vulnerability {
  id: string;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  type: string;
  file: string;
  line: number;
  description: string;
  recommendation: string;
  status: 'open' | 'fixed' | 'false_positive';
  discoveredAt: string;
}

const VulnerabilityList: React.FC = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [filteredVulns, setFilteredVulns] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [severityFilter, setSeverityFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  const [selectedVuln, setSelectedVuln] = useState<Vulnerability | null>(null);
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());

  useEffect(() => {
    // 模拟数据加载
    setTimeout(() => {
      const mockData: Vulnerability[] = [
        {
          id: '1',
          title: 'SQL注入漏洞',
          severity: 'critical',
          type: 'SQL Injection',
          file: 'src/database/user.go',
          line: 45,
          description: '在用户查询函数中发现SQL注入漏洞，攻击者可能通过恶意输入执行任意SQL命令。',
          recommendation: '使用参数化查询或预编译语句来防止SQL注入攻击。',
          status: 'open',
          discoveredAt: '2024-01-15T10:30:00Z',
        },
        {
          id: '2',
          title: '跨站脚本攻击(XSS)',
          severity: 'high',
          type: 'Cross-Site Scripting',
          file: 'src/handlers/comment.go',
          line: 78,
          description: '用户输入未经适当转义直接输出到HTML页面，可能导致XSS攻击。',
          recommendation: '对所有用户输入进行HTML转义，使用安全的模板引擎。',
          status: 'open',
          discoveredAt: '2024-01-14T14:20:00Z',
        },
        {
          id: '3',
          title: '硬编码密码',
          severity: 'high',
          type: 'Hard-coded Credentials',
          file: 'src/config/database.go',
          line: 23,
          description: '在源代码中发现硬编码的数据库密码。',
          recommendation: '将敏感信息存储在环境变量或安全的配置文件中。',
          status: 'fixed',
          discoveredAt: '2024-01-13T09:15:00Z',
        },
        {
          id: '4',
          title: '路径遍历漏洞',
          severity: 'medium',
          type: 'Path Traversal',
          file: 'src/handlers/file.go',
          line: 156,
          description: '文件下载功能未验证文件路径，可能导致目录遍历攻击。',
          recommendation: '验证和规范化文件路径，限制访问范围。',
          status: 'open',
          discoveredAt: '2024-01-12T16:45:00Z',
        },
        {
          id: '5',
          title: '弱加密算法',
          severity: 'medium',
          type: 'Weak Cryptography',
          file: 'src/utils/crypto.go',
          line: 34,
          description: '使用了已知不安全的MD5哈希算法。',
          recommendation: '使用更安全的哈希算法如SHA-256或bcrypt。',
          status: 'open',
          discoveredAt: '2024-01-11T11:30:00Z',
        },
      ];
      setVulnerabilities(mockData);
      setFilteredVulns(mockData);
      setLoading(false);
    }, 1000);
  }, []);

  useEffect(() => {
    let filtered = vulnerabilities;

    if (searchTerm) {
      filtered = filtered.filter(vuln =>
        vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.file.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.type.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (severityFilter !== 'all') {
      filtered = filtered.filter(vuln => vuln.severity === severityFilter);
    }

    if (statusFilter !== 'all') {
      filtered = filtered.filter(vuln => vuln.status === statusFilter);
    }

    setFilteredVulns(filtered);
  }, [searchTerm, severityFilter, statusFilter, vulnerabilities]);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'error';
      case 'high': return 'warning';
      case 'medium': return 'info';
      case 'low': return 'success';
      default: return 'default';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'error';
      case 'fixed': return 'success';
      case 'false_positive': return 'default';
      default: return 'default';
    }
  };

  const toggleRowExpansion = (id: string) => {
    const newExpanded = new Set(expandedRows);
    if (newExpanded.has(id)) {
      newExpanded.delete(id);
    } else {
      newExpanded.add(id);
    }
    setExpandedRows(newExpanded);
  };

  const handleRefresh = () => {
    setLoading(true);
    // 模拟刷新
    setTimeout(() => setLoading(false), 1000);
  };

  if (loading) {
    return (
      <Box sx={{ width: '100%', mt: 2 }}>
        <LinearProgress />
        <Typography variant="h6" sx={{ mt: 2, textAlign: 'center' }}>
          正在加载漏洞数据...
        </Typography>
      </Box>
    );
  }

  return (
    <Box>
      <Typography variant="h4" gutterBottom>
        漏洞列表
      </Typography>

      {/* 过滤器 */}
      <Paper elevation={1} sx={{ p: 2, mb: 3 }}>
        <Box display="flex" gap={2} alignItems="center" flexWrap="wrap">
          <TextField
            label="搜索"
            variant="outlined"
            size="small"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            sx={{ minWidth: 200 }}
          />
          
          <FormControl size="small" sx={{ minWidth: 120 }}>
            <InputLabel>严重程度</InputLabel>
            <Select
              value={severityFilter}
              label="严重程度"
              onChange={(e) => setSeverityFilter(e.target.value)}
            >
              <MenuItem value="all">全部</MenuItem>
              <MenuItem value="critical">严重</MenuItem>
              <MenuItem value="high">高危</MenuItem>
              <MenuItem value="medium">中危</MenuItem>
              <MenuItem value="low">低危</MenuItem>
            </Select>
          </FormControl>

          <FormControl size="small" sx={{ minWidth: 120 }}>
            <InputLabel>状态</InputLabel>
            <Select
              value={statusFilter}
              label="状态"
              onChange={(e) => setStatusFilter(e.target.value)}
            >
              <MenuItem value="all">全部</MenuItem>
              <MenuItem value="open">未修复</MenuItem>
              <MenuItem value="fixed">已修复</MenuItem>
              <MenuItem value="false_positive">误报</MenuItem>
            </Select>
          </FormControl>

          <Button
            variant="outlined"
            startIcon={<Refresh />}
            onClick={handleRefresh}
          >
            刷新
          </Button>

          <Button
            variant="outlined"
            startIcon={<Download />}
          >
            导出
          </Button>
        </Box>
      </Paper>

      {/* 统计信息 */}
      <Alert severity="info" sx={{ mb: 2 }}>
        共找到 {filteredVulns.length} 个漏洞
      </Alert>

      {/* 漏洞表格 */}
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>展开</TableCell>
              <TableCell>标题</TableCell>
              <TableCell>严重程度</TableCell>
              <TableCell>类型</TableCell>
              <TableCell>文件</TableCell>
              <TableCell>行号</TableCell>
              <TableCell>状态</TableCell>
              <TableCell>操作</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filteredVulns.map((vuln) => (
              <React.Fragment key={vuln.id}>
                <TableRow hover>
                  <TableCell>
                    <IconButton
                      size="small"
                      onClick={() => toggleRowExpansion(vuln.id)}
                    >
                      {expandedRows.has(vuln.id) ? <ExpandLess /> : <ExpandMore />}
                    </IconButton>
                  </TableCell>
                  <TableCell>{vuln.title}</TableCell>
                  <TableCell>
                    <Chip
                      label={vuln.severity}
                      color={getSeverityColor(vuln.severity) as any}
                      size="small"
                    />
                  </TableCell>
                  <TableCell>{vuln.type}</TableCell>
                  <TableCell>{vuln.file}</TableCell>
                  <TableCell>{vuln.line}</TableCell>
                  <TableCell>
                    <Chip
                      label={vuln.status === 'open' ? '未修复' : vuln.status === 'fixed' ? '已修复' : '误报'}
                      color={getStatusColor(vuln.status) as any}
                      size="small"
                    />
                  </TableCell>
                  <TableCell>
                    <IconButton
                      size="small"
                      onClick={() => setSelectedVuln(vuln)}
                    >
                      <Visibility />
                    </IconButton>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={8}>
                    <Collapse in={expandedRows.has(vuln.id)} timeout="auto" unmountOnExit>
                      <Box sx={{ margin: 1, p: 2, bgcolor: 'grey.50' }}>
                        <Typography variant="h6" gutterBottom>
                          详细信息
                        </Typography>
                        <Typography variant="body2" paragraph>
                          <strong>描述：</strong> {vuln.description}
                        </Typography>
                        <Typography variant="body2" paragraph>
                          <strong>修复建议：</strong> {vuln.recommendation}
                        </Typography>
                        <Typography variant="body2">
                          <strong>发现时间：</strong> {new Date(vuln.discoveredAt).toLocaleString()}
                        </Typography>
                      </Box>
                    </Collapse>
                  </TableCell>
                </TableRow>
              </React.Fragment>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      {/* 详情对话框 */}
      <Dialog
        open={!!selectedVuln}
        onClose={() => setSelectedVuln(null)}
        maxWidth="md"
        fullWidth
      >
        {selectedVuln && (
          <>
            <DialogTitle>{selectedVuln.title}</DialogTitle>
            <DialogContent>
              <Box sx={{ mb: 2 }}>
                <Chip
                  label={selectedVuln.severity}
                  color={getSeverityColor(selectedVuln.severity) as any}
                  sx={{ mr: 1 }}
                />
                <Chip
                  label={selectedVuln.type}
                  variant="outlined"
                />
              </Box>
              <Typography variant="body1" paragraph>
                <strong>文件：</strong> {selectedVuln.file}:{selectedVuln.line}
              </Typography>
              <Typography variant="body1" paragraph>
                <strong>描述：</strong> {selectedVuln.description}
              </Typography>
              <Typography variant="body1" paragraph>
                <strong>修复建议：</strong> {selectedVuln.recommendation}
              </Typography>
              <Typography variant="body2" color="textSecondary">
                发现时间：{new Date(selectedVuln.discoveredAt).toLocaleString()}
              </Typography>
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setSelectedVuln(null)}>关闭</Button>
            </DialogActions>
          </>
        )}
      </Dialog>
    </Box>
  );
};

export default VulnerabilityList;