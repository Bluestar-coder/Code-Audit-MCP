# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import taint_analysis_pb2 as taint__analysis__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in taint_analysis_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TaintAnalyzerStub(object):
    """污点分析服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeTaint = channel.unary_unary(
                '/codeaudit.TaintAnalyzer/AnalyzeTaint',
                request_serializer=taint__analysis__pb2.TaintAnalysisRequest.SerializeToString,
                response_deserializer=taint__analysis__pb2.TaintAnalysisResponse.FromString,
                _registered_method=True)
        self.TracePath = channel.unary_stream(
                '/codeaudit.TaintAnalyzer/TracePath',
                request_serializer=taint__analysis__pb2.TracePathRequest.SerializeToString,
                response_deserializer=taint__analysis__pb2.PathSegment.FromString,
                _registered_method=True)
        self.QuerySources = channel.unary_unary(
                '/codeaudit.TaintAnalyzer/QuerySources',
                request_serializer=taint__analysis__pb2.QuerySourcesRequest.SerializeToString,
                response_deserializer=taint__analysis__pb2.QuerySourcesResponse.FromString,
                _registered_method=True)
        self.QuerySinks = channel.unary_unary(
                '/codeaudit.TaintAnalyzer/QuerySinks',
                request_serializer=taint__analysis__pb2.QuerySinksRequest.SerializeToString,
                response_deserializer=taint__analysis__pb2.QuerySinksResponse.FromString,
                _registered_method=True)


class TaintAnalyzerServicer(object):
    """污点分析服务
    """

    def AnalyzeTaint(self, request, context):
        """分析污点
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TracePath(self, request, context):
        """追踪污点路径
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuerySources(self, request, context):
        """查询污点源
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuerySinks(self, request, context):
        """查询污点汇
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaintAnalyzerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeTaint': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeTaint,
                    request_deserializer=taint__analysis__pb2.TaintAnalysisRequest.FromString,
                    response_serializer=taint__analysis__pb2.TaintAnalysisResponse.SerializeToString,
            ),
            'TracePath': grpc.unary_stream_rpc_method_handler(
                    servicer.TracePath,
                    request_deserializer=taint__analysis__pb2.TracePathRequest.FromString,
                    response_serializer=taint__analysis__pb2.PathSegment.SerializeToString,
            ),
            'QuerySources': grpc.unary_unary_rpc_method_handler(
                    servicer.QuerySources,
                    request_deserializer=taint__analysis__pb2.QuerySourcesRequest.FromString,
                    response_serializer=taint__analysis__pb2.QuerySourcesResponse.SerializeToString,
            ),
            'QuerySinks': grpc.unary_unary_rpc_method_handler(
                    servicer.QuerySinks,
                    request_deserializer=taint__analysis__pb2.QuerySinksRequest.FromString,
                    response_serializer=taint__analysis__pb2.QuerySinksResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'codeaudit.TaintAnalyzer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('codeaudit.TaintAnalyzer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TaintAnalyzer(object):
    """污点分析服务
    """

    @staticmethod
    def AnalyzeTaint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/codeaudit.TaintAnalyzer/AnalyzeTaint',
            taint__analysis__pb2.TaintAnalysisRequest.SerializeToString,
            taint__analysis__pb2.TaintAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TracePath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/codeaudit.TaintAnalyzer/TracePath',
            taint__analysis__pb2.TracePathRequest.SerializeToString,
            taint__analysis__pb2.PathSegment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QuerySources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/codeaudit.TaintAnalyzer/QuerySources',
            taint__analysis__pb2.QuerySourcesRequest.SerializeToString,
            taint__analysis__pb2.QuerySourcesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QuerySinks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/codeaudit.TaintAnalyzer/QuerySinks',
            taint__analysis__pb2.QuerySinksRequest.SerializeToString,
            taint__analysis__pb2.QuerySinksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
