// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: taint_analysis.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaintAnalyzer_AnalyzeTaint_FullMethodName = "/codeaudit.TaintAnalyzer/AnalyzeTaint"
	TaintAnalyzer_TracePath_FullMethodName    = "/codeaudit.TaintAnalyzer/TracePath"
	TaintAnalyzer_QuerySources_FullMethodName = "/codeaudit.TaintAnalyzer/QuerySources"
	TaintAnalyzer_QuerySinks_FullMethodName   = "/codeaudit.TaintAnalyzer/QuerySinks"
)

// TaintAnalyzerClient is the client API for TaintAnalyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 污点分析服务
type TaintAnalyzerClient interface {
	// 分析污点
	AnalyzeTaint(ctx context.Context, in *TaintAnalysisRequest, opts ...grpc.CallOption) (*TaintAnalysisResponse, error)
	// 追踪污点路径
	TracePath(ctx context.Context, in *TracePathRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PathSegment], error)
	// 查询污点源
	QuerySources(ctx context.Context, in *QuerySourcesRequest, opts ...grpc.CallOption) (*QuerySourcesResponse, error)
	// 查询污点汇
	QuerySinks(ctx context.Context, in *QuerySinksRequest, opts ...grpc.CallOption) (*QuerySinksResponse, error)
}

type taintAnalyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaintAnalyzerClient(cc grpc.ClientConnInterface) TaintAnalyzerClient {
	return &taintAnalyzerClient{cc}
}

func (c *taintAnalyzerClient) AnalyzeTaint(ctx context.Context, in *TaintAnalysisRequest, opts ...grpc.CallOption) (*TaintAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaintAnalysisResponse)
	err := c.cc.Invoke(ctx, TaintAnalyzer_AnalyzeTaint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taintAnalyzerClient) TracePath(ctx context.Context, in *TracePathRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PathSegment], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaintAnalyzer_ServiceDesc.Streams[0], TaintAnalyzer_TracePath_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TracePathRequest, PathSegment]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaintAnalyzer_TracePathClient = grpc.ServerStreamingClient[PathSegment]

func (c *taintAnalyzerClient) QuerySources(ctx context.Context, in *QuerySourcesRequest, opts ...grpc.CallOption) (*QuerySourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySourcesResponse)
	err := c.cc.Invoke(ctx, TaintAnalyzer_QuerySources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taintAnalyzerClient) QuerySinks(ctx context.Context, in *QuerySinksRequest, opts ...grpc.CallOption) (*QuerySinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySinksResponse)
	err := c.cc.Invoke(ctx, TaintAnalyzer_QuerySinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaintAnalyzerServer is the server API for TaintAnalyzer service.
// All implementations must embed UnimplementedTaintAnalyzerServer
// for forward compatibility.
//
// 污点分析服务
type TaintAnalyzerServer interface {
	// 分析污点
	AnalyzeTaint(context.Context, *TaintAnalysisRequest) (*TaintAnalysisResponse, error)
	// 追踪污点路径
	TracePath(*TracePathRequest, grpc.ServerStreamingServer[PathSegment]) error
	// 查询污点源
	QuerySources(context.Context, *QuerySourcesRequest) (*QuerySourcesResponse, error)
	// 查询污点汇
	QuerySinks(context.Context, *QuerySinksRequest) (*QuerySinksResponse, error)
	mustEmbedUnimplementedTaintAnalyzerServer()
}

// UnimplementedTaintAnalyzerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaintAnalyzerServer struct{}

func (UnimplementedTaintAnalyzerServer) AnalyzeTaint(context.Context, *TaintAnalysisRequest) (*TaintAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeTaint not implemented")
}
func (UnimplementedTaintAnalyzerServer) TracePath(*TracePathRequest, grpc.ServerStreamingServer[PathSegment]) error {
	return status.Errorf(codes.Unimplemented, "method TracePath not implemented")
}
func (UnimplementedTaintAnalyzerServer) QuerySources(context.Context, *QuerySourcesRequest) (*QuerySourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySources not implemented")
}
func (UnimplementedTaintAnalyzerServer) QuerySinks(context.Context, *QuerySinksRequest) (*QuerySinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySinks not implemented")
}
func (UnimplementedTaintAnalyzerServer) mustEmbedUnimplementedTaintAnalyzerServer() {}
func (UnimplementedTaintAnalyzerServer) testEmbeddedByValue()                       {}

// UnsafeTaintAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaintAnalyzerServer will
// result in compilation errors.
type UnsafeTaintAnalyzerServer interface {
	mustEmbedUnimplementedTaintAnalyzerServer()
}

func RegisterTaintAnalyzerServer(s grpc.ServiceRegistrar, srv TaintAnalyzerServer) {
	// If the following call pancis, it indicates UnimplementedTaintAnalyzerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaintAnalyzer_ServiceDesc, srv)
}

func _TaintAnalyzer_AnalyzeTaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaintAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaintAnalyzerServer).AnalyzeTaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaintAnalyzer_AnalyzeTaint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaintAnalyzerServer).AnalyzeTaint(ctx, req.(*TaintAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaintAnalyzer_TracePath_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TracePathRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaintAnalyzerServer).TracePath(m, &grpc.GenericServerStream[TracePathRequest, PathSegment]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaintAnalyzer_TracePathServer = grpc.ServerStreamingServer[PathSegment]

func _TaintAnalyzer_QuerySources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaintAnalyzerServer).QuerySources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaintAnalyzer_QuerySources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaintAnalyzerServer).QuerySources(ctx, req.(*QuerySourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaintAnalyzer_QuerySinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaintAnalyzerServer).QuerySinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaintAnalyzer_QuerySinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaintAnalyzerServer).QuerySinks(ctx, req.(*QuerySinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaintAnalyzer_ServiceDesc is the grpc.ServiceDesc for TaintAnalyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaintAnalyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codeaudit.TaintAnalyzer",
	HandlerType: (*TaintAnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeTaint",
			Handler:    _TaintAnalyzer_AnalyzeTaint_Handler,
		},
		{
			MethodName: "QuerySources",
			Handler:    _TaintAnalyzer_QuerySources_Handler,
		},
		{
			MethodName: "QuerySinks",
			Handler:    _TaintAnalyzer_QuerySinks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TracePath",
			Handler:       _TaintAnalyzer_TracePath_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "taint_analysis.proto",
}
